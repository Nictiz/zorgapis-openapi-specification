openapi: 3.1.0
info:
  title: ZorgAPIs API
  version: 0.2.0
  description: |-
    Definition of the Dutch API Library for Healthcare (ZorgAPIs) API.

    # Introduction

    [Nictiz](https://nictiz.nl/) is the Dutch competence centre for electronic exchange of health and care information.
    Nictiz develops and maintains standards for digital information management, ensuring that healthcare information can be
    recorded and exchanged in an unambiguous manner. To this end Nictiz maintains close cooperation with the international
    Standardization Organizations: [IHE](https://www.ihe-europe.net/), [HL7](https://www.hl7.org/),
    [SNOMED International](https://www.snomed.org/), [PCH Alliance](https://www.pchalliance.org/),
    [CEN](https://www.cencenelec.eu/)/[NEN](https://www.nen.nl/en/).

    Nictiz has developed an [API strategy](https://nictiz.github.io/api-strategie-docs/) for Dutch Healthcare and
    [requirements](https://nictiz.github.io/api-requirements-docs/) for Application Programming Interfaces (APIs) in Dutch
    Healthcare.
  license:
    name: MIT License
    url: https://choosealicense.com/licenses/mit/
servers:
  - url: https://{environment}.zorgapis.nl/v1alpha1
    variables:
      environment:
        default: api.sandbox
        enum:
          - api.sandbox
security: []
tags:
  - name: organizations
    description: Organizations API
    x-displayName: Organizations
  - name: api-requirements-versions
    description: API requirements versions API
    x-displayName: API requirements versions
  - name: api-requirements-version.api-requirements
    description: API requirements version API requirements API
    x-displayName: API requirements version API requirements
  - name: api-specifications
    description: API specifications API
    x-displayName: API specifications
  - name: api-specification.versions
    description: API specification versions API
    x-displayName: API specification versions
  - name: api-specification.version.urls
    description: API specification version URLs API
    x-displayName: API specification version URLs
  - name: api-specification.version.declarations-of-conformity
    description: API specification version declarations of conformity API
    x-displayName: API specification version declarations of conformity
paths:
  /organizations:
    get:
      summary: List all organizations
      description: |-
        Returns a list of organizations.

        <details>
        <summary>Details</summary>

        ## Sort expressions

        The following table lists the field names and directions you can use in a sort expression.

        | Field          | Type        | Direction | Example                    |
        |----------------|-------------|-----------|----------------------------|
        | `id`           | `uuid`      | `asc`     | `?sort=asc(id)`            |
        |                |             | `desc`    | `?sort=desc(id)`           |
        | `name`         | `string`    | `asc`     | `?sort=asc(name)`          |
        |                |             | `desc`    | `?sort=desc(name)`         |
        | `address.city` | `string`    | `asc`     | `?sort=asc(address.city)`  |
        |                |             | `desc`    | `?sort=desc(address.city)` |
        | `createTime`   | `date-time` | `asc`     | `?sort=asc(createTime)`    |
        |                |             | `desc`    | `?sort=desc(createTime)`   |
        | `updateTime`   | `date-time` | `asc`     | `?sort=asc(updateTime)`    |
        |                |             | `desc`    | `?sort=desc(updateTime)`   |

        ### Default sort expression

        If the `sort` parameter is omitted, the default sort expression is used:  

        ```
        ?sort=asc(name)
        ```

        This causes the results to be sorted by `name` in ascending order (from A to Z).

        ## Filter expressions

        The following table lists the field names and operators you can use in a filter expression.

        | Field                | Type        | Operator | Example                                                    |
        |----------------------|-------------|----------|------------------------------------------------------------|
        | `id`                 | `uuid`      | `eq`     | `?filter=eq(id,"533d3fe3-bccc-405a-9904-4f516e892856")`    |
        |                      |             | `neq`    | `?filter=neq(id,"533d3fe3-bccc-405a-9904-4f516e892856")`   |
        | `name`               | `string`    | `eq`     | `?filter=eq(name,"Nictiz")`                                |
        |                      |             | `neq`    | `?filter=neq(name,"Nictiz")`                               |
        |                      |             | `has`    | `?filter=has(name,"Nic")`                                  |
        |                      |             | `stw`    | `?filter=stw(name,"Nic")`                                  |
        |                      |             | `enw`    | `?filter=enw(name,"tiz")`                                  |
        |                      |             | `reg`    | `?filter=reg(name,"^[a-zA-Z0-9 ]+$")`                      |
        | `address.street`     | `string`    | `eq`     | `?filter=eq(address.street,"Oude Middenweg")`              |
        |                      |             | `neq`    | `?filter=neq(address.street,"Oude Middenweg")`             |
        |                      |             | `has`    | `?filter=has(address.street,"Oude")`                       |
        |                      |             | `stw`    | `?filter=stw(address.street,"Oude")`                       |
        |                      |             | `enw`    | `?filter=enw(address.street,"Middenweg")`                  |
        |                      |             | `reg`    | `?filter=reg(address.street,"^[a-zA-Z ]+$")`               |
        | `address.postalCode` | `string`    | `eq`     | `?filter=eq(address.postalCode,"2491 AC")`                 |
        |                      |             | `neq`    | `?filter=neq(address.postalCode,"2491 AC")`                |
        |                      |             | `has`    | `?filter=has(address.postalCode,"2491")`                   |
        |                      |             | `stw`    | `?filter=stw(address.postalCode,"2491")`                   |
        |                      |             | `enw`    | `?filter=enw(address.postalCode,"AC")`                     |
        |                      |             | `reg`    | `?filter=reg(address.postalCode,"^(\d{4})\s*([A-Z]{2})$")` |
        | `address.city`       | `string`    | `eq`     | `?filter=eq(address.city,"The Hague")`                     |
        |                      |             | `neq`    | `?filter=neq(address.city,"The Hague")`                    |
        |                      |             | `has`    | `?filter=has(address.city,"The")`                          |
        |                      |             | `stw`    | `?filter=stw(address.city,"The")`                          |
        |                      |             | `enw`    | `?filter=enw(address.city,"Hague")`                        |
        |                      |             | `reg`    | `?filter=reg(address.city,"^[a-zA-Z ]+$")`                 |
        | `address.country`    | `Country`   | `eq`     | `?filter=eq(address.country,"NL")`                         |
        |                      |             | `neq`    | `?filter=neq(address.country,"NL")`                        |
        | `createTime`         | `date-time` | `eq`     | `?filter=eq(createTime,"2024-03-16T14:15:30.500Z")`        |
        |                      |             | `neq`    | `?filter=neq(createTime,"2024-03-16T14:15:30.500Z")`       |
        |                      |             | `gt`     | `?filter=gt(createTime,"2024-03-16T14:15:30.500Z")`        |
        |                      |             | `gte`    | `?filter=gte(createTime,"2024-03-16T14:15:30.500Z")`       |
        |                      |             | `lt`     | `?filter=lt(createTime,"2024-03-16T14:15:30.500Z")`        |
        |                      |             | `lte`    | `?filter=lte(createTime,"2024-03-16T14:15:30.500Z")`       |
        | `updateTime`         | `date-time` | `eq`     | `?filter=eq(updateTime,"2024-03-16T14:15:30.500Z")`        |
        |                      |             | `neq`    | `?filter=neq(updateTime,"2024-03-16T14:15:30.500Z")`       |
        |                      |             | `gt`     | `?filter=gt(updateTime,"2024-03-16T14:15:30.500Z")`        |
        |                      |             | `gte`    | `?filter=gte(updateTime,"2024-03-16T14:15:30.500Z")`       |
        |                      |             | `lt`     | `?filter=lt(updateTime,"2024-03-16T14:15:30.500Z")`        |
        |                      |             | `lte`    | `?filter=lte(updateTime,"2024-03-16T14:15:30.500Z")`       |

        </details>
      operationId: listOrganizations
      tags:
        - organizations
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/skip'
        - $ref: '#/components/parameters/sort'
        - $ref: '#/components/parameters/filter'
        - $ref: '#/components/parameters/count'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Organization_CreateRead'
          headers:
            Total-Count:
              $ref: '#/components/headers/Total-Count'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthenticatedError'
        '403':
          $ref: '#/components/responses/PermissionDeniedError'
        '422':
          $ref: '#/components/responses/InvalidArgumentError'
        '429':
          $ref: '#/components/responses/ResourceExhaustedError'
        '503':
          $ref: '#/components/responses/UnavailableError'
        5XX:
          $ref: '#/components/responses/InternalError'
    post:
      summary: Add an organization
      description: |
        Adds an organization to the collection.
      operationId: addOrganization
      tags:
        - organizations
      requestBody:
        description: Organization object to add
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Organization_CreateRead'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization_CreateRead'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthenticatedError'
        '403':
          $ref: '#/components/responses/PermissionDeniedError'
        '422':
          $ref: '#/components/responses/InvalidArgumentError'
        '429':
          $ref: '#/components/responses/ResourceExhaustedError'
        '503':
          $ref: '#/components/responses/UnavailableError'
        5XX:
          $ref: '#/components/responses/InternalError'
  /organizations/{organizationId}:
    get:
      summary: Get an organization by ID
      description: |
        Returns a single organization.
      operationId: getOrganizationById
      tags:
        - organizations
      parameters:
        - $ref: '#/components/parameters/organizationId'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization_CreateRead'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthenticatedError'
        '403':
          $ref: '#/components/responses/PermissionDeniedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '422':
          $ref: '#/components/responses/InvalidArgumentError'
        '429':
          $ref: '#/components/responses/ResourceExhaustedError'
        '503':
          $ref: '#/components/responses/UnavailableError'
        5XX:
          $ref: '#/components/responses/InternalError'
    patch:
      summary: Update an organization
      description: |
        Updates a single organization.
      operationId: updateOrganization
      tags:
        - organizations
      parameters:
        - $ref: '#/components/parameters/organizationId'
      requestBody:
        description: Updated organization object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Organization_Update'
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization_CreateRead'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthenticatedError'
        '403':
          $ref: '#/components/responses/PermissionDeniedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '422':
          $ref: '#/components/responses/InvalidArgumentError'
        '429':
          $ref: '#/components/responses/ResourceExhaustedError'
        '503':
          $ref: '#/components/responses/UnavailableError'
        5XX:
          $ref: '#/components/responses/InternalError'
  /api-requirements-versions:
    get:
      summary: List all API requirements versions
      description: |-
        Returns a list of API requirements versions.

        <details>
        <summary>Details</summary>

        ## Sort expressions

        The following table lists the field names and directions you can use in a sort expression.

        | Field               | Type        | Direction | Example                         |
        |---------------------|-------------|-----------|---------------------------------|
        | `id`                | `uuid`      | `asc`     | `?sort=asc(id)`                 |
        |                     |             | `desc`    | `?sort=desc(id)`                |
        | `name`              | `string`    | `asc`     | `?sort=asc(name)`               |
        |                     |             | `desc`    | `?sort=desc(name)`              |
        | `publishTime`       | `date-time` | `asc`     | `?sort=asc(publishTime)`        |
        |                     |             | `desc`    | `?sort=desc(publishTime)`       |
        | `semVer.major`      | `integer`   | `asc`     | `?sort=asc(semVer.major)`       |
        |                     |             | `desc`    | `?sort=desc(semVer.major)`      |
        | `semVer.minor`      | `integer`   | `asc`     | `?sort=asc(semVer.minor)`       |
        |                     |             | `desc`    | `?sort=desc(semVer.minor)`      |
        | `semVer.patch`      | `integer`   | `asc`     | `?sort=asc(semVer.patch)`       |
        |                     |             | `desc`    | `?sort=desc(semVer.patch)`      |
        | `semVer.preRelease` | `string`    | `asc`     | `?sort=asc(semVer.preRelease)`  |
        |                     |             | `desc`    | `?sort=desc(semVer.preRelease)` |
        | `semVer.build`      | `string`    | `asc`     | `?sort=asc(semVer.build)`       |
        |                     |             | `desc`    | `?sort=desc(semVer.build)`      |
        | `createTime`        | `date-time` | `asc`     | `?sort=asc(createTime)`         |
        |                     |             | `desc`    | `?sort=desc(createTime)`        |
        | `updateTime`        | `date-time` | `asc`     | `?sort=asc(updateTime)`         |
        |                     |             | `desc`    | `?sort=desc(updateTime)`        |

        ### Default sort expression

        If the `sort` parameter is omitted, the default sort expression is used:

        ```
        ?sort=desc(publishTime)
        ```

        This causes results to be sorted by `publishTime` in descending order (from most recent to oldest).

        ## Filter expressions

        The following table lists the field names and operators you can use in a filter expression.

        | Field               | Type                    | Operator | Example                                                  |
        |---------------------|-------------------------|----------|----------------------------------------------------------|
        | `id`                | `uuid`                  | `eq`     | `?filter=eq(id,"533d3fe3-bccc-405a-9904-4f516e892856")`  |
        |                     |                         | `neq`    | `?filter=neq(id,"533d3fe3-bccc-405a-9904-4f516e892856")` |
        | `name`              | `string`                | `eq`     | `?filter=eq(name,"1.2.0")`                               |
        |                     |                         | `neq`    | `?filter=neq(name,"1.2.0")`                              |
        |                     |                         | `has`    | `?filter=has(name,"1.2")`                                |
        |                     |                         | `stw`    | `?filter=stw(name,"1.2")`                                |
        |                     |                         | `enw`    | `?filter=enw(name,"2.0")`                                |
        |                     |                         | `reg`    | `?filter=reg(name,"^[a-zA-Z0-9 ]+$")`                    |
        | `publishTime`       | `date-time`             | `eq`     | `?filter=eq(publishTime,"2024-03-16T14:15:30.500Z")`     |
        |                     |                         | `neq`    | `?filter=neq(publishTime,"2024-03-16T14:15:30.500Z")`    |
        |                     |                         | `gt`     | `?filter=gt(publishTime,"2024-03-16T14:15:30.500Z")`     |
        |                     |                         | `gte`    | `?filter=gte(publishTime,"2024-03-16T14:15:30.500Z")`    |
        |                     |                         | `lt`     | `?filter=lt(publishTime,"2024-03-16T14:15:30.500Z")`     |
        |                     |                         | `lte`    | `?filter=lte(publishTime,"2024-03-16T14:15:30.500Z")`    |
        | `semVer.major`      | `integer`               | `eq`     | `?filter=eq(semVer.major,1)`                             |
        |                     |                         | `neq`    | `?filter=neq(semVer.major,1)`                            |
        |                     |                         | `gt`     | `?filter=gt(semVer.major,1)`                             |
        |                     |                         | `gte`    | `?filter=gte(semVer.major,1)`                            |
        |                     |                         | `lt`     | `?filter=lt(semVer.major,1)`                             |
        |                     |                         | `lte`    | `?filter=lte(semVer.major,1)`                            |
        | `semVer.minor`      | `integer`               | `eq`     | `?filter=eq(semVer.minor,2)`                             |
        |                     |                         | `neq`    | `?filter=neq(semVer.minor,2)`                            |
        |                     |                         | `gt`     | `?filter=gt(semVer.minor,2)`                             |
        |                     |                         | `gte`    | `?filter=gte(semVer.minor,2)`                            |
        |                     |                         | `lt`     | `?filter=lt(semVer.minor,2)`                             |
        |                     |                         | `lte`    | `?filter=lte(semVer.minor,2)`                            |
        | `semVer.patch`      | `integer`               | `eq`     | `?filter=eq(semVer.patch,0)`                             |
        |                     |                         | `neq`    | `?filter=neq(semVer.patch,0)`                            |
        |                     |                         | `gt`     | `?filter=gt(semVer.patch,0)`                             |
        |                     |                         | `gte`    | `?filter=gte(semVer.patch,0)`                            |
        |                     |                         | `lt`     | `?filter=lt(semVer.patch,0)`                             |
        |                     |                         | `lte`    | `?filter=lte(semVer.patch,0)`                            |
        | `semVer.preRelease` | `string`                | `eq`     | `?filter=eq(semVer.preRelease,"beta")`                   |
        |                     |                         | `neq`    | `?filter=neq(semVer.preRelease,"beta")`                  |
        |                     |                         | `has`    | `?filter=has(semVer.preRelease,"be")`                    |
        |                     |                         | `stw`    | `?filter=stw(semVer.preRelease,"be")`                    |
        |                     |                         | `enw`    | `?filter=enw(semVer.preRelease,"ta")`                    |
        |                     |                         | `reg`    | `?filter=reg(semVer.preRelease,"^[a-zA-Z0-9 ]+$")`       |
        | `semVer.build`      | `string`                | `eq`     | `?filter=eq(semVer.build,"exp.sha.5114f85")`             |
        |                     |                         | `neq`    | `?filter=neq(semVer.build,"exp.sha.5114f85")`            |
        |                     |                         | `has`    | `?filter=has(semVer.build,"exp.sha")`                    |
        |                     |                         | `stw`    | `?filter=stw(semVer.build,"exp.sha")`                    |
        |                     |                         | `enw`    | `?filter=enw(semVer.build,"5114f85")`                    |
        |                     |                         | `reg`    | `?filter=reg(semVer.build,"^[a-zA-Z0-9 ]+$")`            |
        | `lifecycleState`    | `ProductLifecycleState` | `eq`     | `?filter=eq(lifecycleState,"PUBLISHED")`                 |
        |                     |                         | `neq`    | `?filter=neq(lifecycleState,"PUBLISHED")`                |
        | `createTime`        | `date-time`             | `eq`     | `?filter=eq(createTime,"2024-03-16T14:15:30.500Z")`      |
        |                     |                         | `neq`    | `?filter=neq(createTime,"2024-03-16T14:15:30.500Z")`     |
        |                     |                         | `gt`     | `?filter=gt(createTime,"2024-03-16T14:15:30.500Z")`      |
        |                     |                         | `gte`    | `?filter=gte(createTime,"2024-03-16T14:15:30.500Z")`     |
        |                     |                         | `lt`     | `?filter=lt(createTime,"2024-03-16T14:15:30.500Z")`      |
        |                     |                         | `lte`    | `?filter=lte(createTime,"2024-03-16T14:15:30.500Z")`     |
        | `updateTime`        | `date-time`             | `eq`     | `?filter=eq(updateTime,"2024-03-16T14:15:30.500Z")`      |
        |                     |                         | `neq`    | `?filter=neq(updateTime,"2024-03-16T14:15:30.500Z")`     |
        |                     |                         | `gt`     | `?filter=gt(updateTime,"2024-03-16T14:15:30.500Z")`      |
        |                     |                         | `gte`    | `?filter=gte(updateTime,"2024-03-16T14:15:30.500Z")`     |
        |                     |                         | `lt`     | `?filter=lt(updateTime,"2024-03-16T14:15:30.500Z")`      |
        |                     |                         | `lte`    | `?filter=lte(updateTime,"2024-03-16T14:15:30.500Z")`     |

        </details>
      operationId: listApiRequirementsVersions
      tags:
        - api-requirements-versions
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/skip'
        - $ref: '#/components/parameters/sort'
        - $ref: '#/components/parameters/filter'
        - $ref: '#/components/parameters/count'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiRequirementsVersion_CreateRead'
          headers:
            Total-Count:
              $ref: '#/components/headers/Total-Count'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthenticatedError'
        '403':
          $ref: '#/components/responses/PermissionDeniedError'
        '422':
          $ref: '#/components/responses/InvalidArgumentError'
        '429':
          $ref: '#/components/responses/ResourceExhaustedError'
        '503':
          $ref: '#/components/responses/UnavailableError'
        5XX:
          $ref: '#/components/responses/InternalError'
    post:
      summary: Add an API requirements version
      description: |
        Adds an API requirements version to the collection.
      operationId: addApiRequirementsVersion
      tags:
        - api-requirements-versions
      requestBody:
        description: API requirements version object to add
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiRequirementsVersion_CreateRead'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiRequirementsVersion_CreateRead'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthenticatedError'
        '403':
          $ref: '#/components/responses/PermissionDeniedError'
        '422':
          $ref: '#/components/responses/InvalidArgumentError'
        '429':
          $ref: '#/components/responses/ResourceExhaustedError'
        '503':
          $ref: '#/components/responses/UnavailableError'
        5XX:
          $ref: '#/components/responses/InternalError'
  /api-requirements-versions/{versionName}:
    get:
      summary: Get an API requirements version by name
      description: |
        Returns a single API requirements version.
      operationId: getApiRequirementsVersionByName
      tags:
        - api-requirements-versions
      parameters:
        - $ref: '#/components/parameters/versionName'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiRequirementsVersion_CreateRead'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthenticatedError'
        '403':
          $ref: '#/components/responses/PermissionDeniedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '422':
          $ref: '#/components/responses/InvalidArgumentError'
        '429':
          $ref: '#/components/responses/ResourceExhaustedError'
        '503':
          $ref: '#/components/responses/UnavailableError'
        5XX:
          $ref: '#/components/responses/InternalError'
    patch:
      summary: Update an API requirements version
      description: |
        Updates a single API requirements version.
      operationId: updateApiRequirementsVersion
      tags:
        - api-requirements-versions
      parameters:
        - $ref: '#/components/parameters/versionName'
      requestBody:
        description: Updated API requirements version object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiRequirementsVersion_Update'
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiRequirementsVersion_CreateRead'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthenticatedError'
        '403':
          $ref: '#/components/responses/PermissionDeniedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '422':
          $ref: '#/components/responses/InvalidArgumentError'
        '429':
          $ref: '#/components/responses/ResourceExhaustedError'
        '503':
          $ref: '#/components/responses/UnavailableError'
        5XX:
          $ref: '#/components/responses/InternalError'
  /api-requirements-versions/{versionName}/api-requirements:
    get:
      summary: List all API requirements version API requirements
      description: |-
        Returns a list of API requirements.

        <details>
        <summary>Details</summary>

        ## Sort expressions

        The following table lists the field names and directions you can use in a sort expression.

        | Field               | Type        | Direction | Example                         |
        |---------------------|-------------|-----------|---------------------------------|
        | `id`                | `uuid`      | `asc`     | `?sort=asc(id)`                 |
        |                     |             | `desc`    | `?sort=desc(id)`                |
        | `code`              | `string`    | `asc`     | `?sort=asc(code)`               |
        |                     |             | `desc`    | `?sort=desc(code)`              |
        | `createTime`        | `date-time` | `asc`     | `?sort=asc(createTime)`         |
        |                     |             | `desc`    | `?sort=desc(createTime)`        |
        | `updateTime`        | `date-time` | `asc`     | `?sort=asc(updateTime)`         |
        |                     |             | `desc`    | `?sort=desc(updateTime)`        |

        ### Default sort expression

        If the `sort` parameter is omitted, the default sort expression is used:

        ```
        ?sort=asc(code)
        ```

        This causes results to be sorted by `code` in ascending order (from A to Z).

        ## Filter expressions

        The following table lists the field names and operators you can use in a filter expression.

        | Field                       | Type                      | Operator | Example                                                       |
        |-----------------------------|---------------------------|----------|---------------------------------------------------------------|
        | `id`                        | `uuid`                    | `eq`     | `?filter=eq(id,"533d3fe3-bccc-405a-9904-4f516e892856")`       |
        |                             |                           | `neq`    | `?filter=neq(id,"533d3fe3-bccc-405a-9904-4f516e892856")`      |
        | `code`                      | `string`                  | `eq`     | `?filter=eq(code,"SD001")`                                    |
        |                             |                           | `neq`    | `?filter=neq(code,"SD001")`                                   |
        |                             |                           | `has`    | `?filter=has(code,"SD0")`                                     |
        |                             |                           | `stw`    | `?filter=stw(code,"SD0")`                                     |
        |                             |                           | `enw`    | `?filter=enw(code,"001")`                                     |
        |                             |                           | `reg`    | `?filter=reg(code,"^[a-zA-Z0-9 ]+$")`                         |
        | `requirementLevel`          | `RequirementLevel`        | `eq`     | `?filter=eq(requirementLevel,"MUST")`                         |
        |                             |                           | `neq`    | `?filter=neq(requirementLevel,"MUST")`                        |
        | `score`                     | `integer`                 | `eq`     | `?filter=eq(score,1)`                                         |
        |                             |                           | `neq`    | `?filter=neq(score,1)`                                        |
        |                             |                           | `gt`     | `?filter=gt(score,1)`                                         |
        |                             |                           | `gte`    | `?filter=gte(score,1)`                                        |
        |                             |                           | `lt`     | `?filter=lt(score,1)`                                         |
        |                             |                           | `lte`    | `?filter=lte(score,1)`                                        |
        | `category`                  | `ApiRequirementCategory`  | `eq`     | `?filter=eq(category,"API_SPECIFICATION_AND_DOCUMENTATION")`  |
        |                             |                           | `neq`    | `?filter=neq(category,"API_SPECIFICATION_AND_DOCUMENTATION")` |
        | `roles.$it`                 | `ApiRole`                 | `eq`     | `?filter=any(roles,eq($it,"API_SPECIFIER"))`                  |
        |                             |                           | `neq`    | `?filter=all(roles,neq($it,"API_SPECIFIER"))`                 |
        | `perspectiveTypes.$it`      | `ApiPerspectiveType`      | `eq`     | `?filter=any(perspectiveTypes,eq($it,"API_SPECIFICATION"))`   |
        |                             |                           | `neq`    | `?filter=all(perspectiveTypes,neq($it,"API_SPECIFICATION"))`  |
        | `architecturalStyles.$it`   | `ApiArchitecturalStyle`   | `eq`     | `?filter=any(architecturalStyles,eq($it,"REST"))`             |
        |                             |                           | `neq`    | `?filter=all(architecturalStyles,neq($it,"REST"))`            |
        | `standardizationLevels.$it` | `ApiStandardizationLevel` | `eq`     | `?filter=any(standardizationLevels,eq($it,"OPEN_API"))`       |
        |                             |                           | `neq`    | `?filter=all(standardizationLevels,neq($it,"OPEN_API"))`      |
        | `createTime`                | `date-time`               | `eq`     | `?filter=eq(createTime,"2024-03-16T14:15:30.500Z")`           |
        |                             |                           | `neq`    | `?filter=neq(createTime,"2024-03-16T14:15:30.500Z")`          |
        |                             |                           | `gt`     | `?filter=gt(createTime,"2024-03-16T14:15:30.500Z")`           |
        |                             |                           | `gte`    | `?filter=gte(createTime,"2024-03-16T14:15:30.500Z")`          |
        |                             |                           | `lt`     | `?filter=lt(createTime,"2024-03-16T14:15:30.500Z")`           |
        |                             |                           | `lte`    | `?filter=lte(createTime,"2024-03-16T14:15:30.500Z")`          |
        | `updateTime`                | `date-time`               | `eq`     | `?filter=eq(updateTime,"2024-03-16T14:15:30.500Z")`           |
        |                             |                           | `neq`    | `?filter=neq(updateTime,"2024-03-16T14:15:30.500Z")`          |
        |                             |                           | `gt`     | `?filter=gt(updateTime,"2024-03-16T14:15:30.500Z")`           |
        |                             |                           | `gte`    | `?filter=gte(updateTime,"2024-03-16T14:15:30.500Z")`          |
        |                             |                           | `lt`     | `?filter=lt(updateTime,"2024-03-16T14:15:30.500Z")`           |
        |                             |                           | `lte`    | `?filter=lte(updateTime,"2024-03-16T14:15:30.500Z")`          |

        ### Examples

        #### All `API_SPECIFICATION` `REST` requirements

        ```
        ?filter=and(any(perspectiveTypes,eq($it,"API_SPECIFICATION")),any(architecturalStyles,eq($it,"REST")))
        ```

        </details>
      operationId: listApiRequirementsVersionApiRequirements
      tags:
        - api-requirements-version.api-requirements
      parameters:
        - $ref: '#/components/parameters/versionName'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/skip'
        - $ref: '#/components/parameters/sort'
        - $ref: '#/components/parameters/filter'
        - $ref: '#/components/parameters/count'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiRequirement_CreateRead'
          headers:
            Total-Count:
              $ref: '#/components/headers/Total-Count'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthenticatedError'
        '403':
          $ref: '#/components/responses/PermissionDeniedError'
        '422':
          $ref: '#/components/responses/InvalidArgumentError'
        '429':
          $ref: '#/components/responses/ResourceExhaustedError'
        '503':
          $ref: '#/components/responses/UnavailableError'
        5XX:
          $ref: '#/components/responses/InternalError'
  /api-specifications:
    get:
      summary: List all API specifications
      description: |-
        Returns a list of API specifications.

        <details>
        <summary>Details</summary>

        ## Sort expressions

        The following table lists the field names and directions you can use in a sort expression.

        | Field               | Type        | Direction | Example                         |
        |---------------------|-------------|-----------|---------------------------------|
        | `id`                | `uuid`      | `asc`     | `?sort=asc(id)`                 |
        |                     |             | `desc`    | `?sort=desc(id)`                |
        | `name`              | `string`    | `asc`     | `?sort=asc(name)`               |
        |                     |             | `desc`    | `?sort=desc(name)`              |
        | `createTime`        | `date-time` | `asc`     | `?sort=asc(createTime)`         |
        |                     |             | `desc`    | `?sort=desc(createTime)`        |
        | `updateTime`        | `date-time` | `asc`     | `?sort=asc(updateTime)`         |
        |                     |             | `desc`    | `?sort=desc(updateTime)`        |

        ### Default sort expression

        If the `sort` parameter is omitted, the default sort expression is used:

        ```
        ?sort=desc(createTime)
        ```

        This causes results to be sorted by `createTime` in descending order (from most recent to oldest).

        ## Filter expressions

        The following table lists the field names and operators you can use in a filter expression.

        | Field                                                         | Type                    | Operator | Example                                                                                      |
        |---------------------------------------------------------------|-------------------------|----------|----------------------------------------------------------------------------------------------|
        | `id`                                                          | `uuid`                  | `eq`     | `?filter=eq(id,"533d3fe3-bccc-405a-9904-4f516e892856")`                                      |
        |                                                               |                         | `neq`    | `?filter=neq(id,"533d3fe3-bccc-405a-9904-4f516e892856")`                                     |
        | `name`                                                        | `string`                | `eq`     | `?filter=eq(name,"Verzamelen Huisartsgegevens")`                                             |
        |                                                               |                         | `neq`    | `?filter=neq(name,"Verzamelen Huisartsgegevens")`                                            |
        |                                                               |                         | `has`    | `?filter=has(name,"Verzamelen")`                                                             |
        |                                                               |                         | `stw`    | `?filter=stw(name,"Verzamelen")`                                                             |
        |                                                               |                         | `enw`    | `?filter=enw(name,"Huisartsgegevens")`                                                       |
        |                                                               |                         | `reg`    | `?filter=reg(name,"^[a-zA-Z0-9 ]+$")`                                                        |
        | `organizationId`                                              | `uuid`                  | `eq`     | `?filter=eq(organizationId,"533d3fe3-bccc-405a-9904-4f516e892856")`                          |
        |                                                               |                         | `neq`    | `?filter=neq(organizationId,"533d3fe3-bccc-405a-9904-4f516e892856")`                         |
        | `architecturalStyle`                                          | `ApiArchitecturalStyle` | `eq`     | `?filter=eq(architecturalStyle,"REST")`                                                      |
        |                                                               |                         | `neq`    | `?filter=neq(architecturalStyle,"REST")`                                                     |
        | `mainVersion.lastDeclarationOfConformity.requirementsVersion` | `string`                | `eq`     | `?filter=eq(mainVersion.lastDeclarationOfConformity.requirementsVersion,"1.2.0")`            |
        |                                                               |                         | `neq`    | `?filter=neq(mainVersion.lastDeclarationOfConformity.requirementsVersion,"1.2.0")`           |
        |                                                               |                         | `has`    | `?filter=has(mainVersion.lastDeclarationOfConformity.requirementsVersion,"1.2")`             |
        |                                                               |                         | `stw`    | `?filter=stw(mainVersion.lastDeclarationOfConformity.requirementsVersion,"1.2")`             |
        |                                                               |                         | `enw`    | `?filter=enw(mainVersion.lastDeclarationOfConformity.requirementsVersion,"2.0")`             |
        |                                                               |                         | `reg`    | `?filter=reg(mainVersion.lastDeclarationOfConformity.requirementsVersion,"^[a-zA-Z0-9 ]+$")` |
        | `mainVersion.lastDeclarationOfConformity.rankingLevel`        | `ApiRankingLevel`       | `eq`     | `?filter=eq(mainVersion.lastDeclarationOfConformity.rankingLevel,"OPEN_API")`                |
        |                                                               |                         | `neq`    | `?filter=neq(mainVersion.lastDeclarationOfConformity.rankingLevel,"OPEN_API")`               |
        | `createTime`                                                  | `date-time`             | `eq`     | `?filter=eq(createTime,"2024-03-16T14:15:30.500Z")`                                          |
        |                                                               |                         | `neq`    | `?filter=neq(createTime,"2024-03-16T14:15:30.500Z")`                                         |
        |                                                               |                         | `gt`     | `?filter=gt(createTime,"2024-03-16T14:15:30.500Z")`                                          |
        |                                                               |                         | `gte`    | `?filter=gte(createTime,"2024-03-16T14:15:30.500Z")`                                         |
        |                                                               |                         | `lt`     | `?filter=lt(createTime,"2024-03-16T14:15:30.500Z")`                                          |
        |                                                               |                         | `lte`    | `?filter=lte(createTime,"2024-03-16T14:15:30.500Z")`                                         |
        | `updateTime`                                                  | `date-time`             | `eq`     | `?filter=eq(updateTime,"2024-03-16T14:15:30.500Z")`                                          |
        |                                                               |                         | `neq`    | `?filter=neq(updateTime,"2024-03-16T14:15:30.500Z")`                                         |
        |                                                               |                         | `gt`     | `?filter=gt(updateTime,"2024-03-16T14:15:30.500Z")`                                          |
        |                                                               |                         | `gte`    | `?filter=gte(updateTime,"2024-03-16T14:15:30.500Z")`                                         |
        |                                                               |                         | `lt`     | `?filter=lt(updateTime,"2024-03-16T14:15:30.500Z")`                                          |
        |                                                               |                         | `lte`    | `?filter=lte(updateTime,"2024-03-16T14:15:30.500Z")`                                         |

        </details>
      operationId: listApiSpecifications
      tags:
        - api-specifications
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/skip'
        - $ref: '#/components/parameters/sort'
        - $ref: '#/components/parameters/filter'
        - $ref: '#/components/parameters/count'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiSpecification_Read'
          headers:
            Total-Count:
              $ref: '#/components/headers/Total-Count'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthenticatedError'
        '403':
          $ref: '#/components/responses/PermissionDeniedError'
        '422':
          $ref: '#/components/responses/InvalidArgumentError'
        '429':
          $ref: '#/components/responses/ResourceExhaustedError'
        '503':
          $ref: '#/components/responses/UnavailableError'
        5XX:
          $ref: '#/components/responses/InternalError'
    post:
      summary: Add an API specification
      description: |
        Adds an API specification to the collection.
      operationId: addApiSpecification
      tags:
        - api-specifications
      requestBody:
        description: API specification object to add
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiSpecification_Create'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiSpecification_Create'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthenticatedError'
        '403':
          $ref: '#/components/responses/PermissionDeniedError'
        '422':
          $ref: '#/components/responses/InvalidArgumentError'
        '429':
          $ref: '#/components/responses/ResourceExhaustedError'
        '503':
          $ref: '#/components/responses/UnavailableError'
        5XX:
          $ref: '#/components/responses/InternalError'
  /api-specifications/{apiSpecificationId}:
    get:
      summary: Get an API specification by ID
      description: |
        Returns a single API specification.
      operationId: getApiSpecificationById
      tags:
        - api-specifications
      parameters:
        - $ref: '#/components/parameters/apiSpecificationId'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiSpecification_Read'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthenticatedError'
        '403':
          $ref: '#/components/responses/PermissionDeniedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '422':
          $ref: '#/components/responses/InvalidArgumentError'
        '429':
          $ref: '#/components/responses/ResourceExhaustedError'
        '503':
          $ref: '#/components/responses/UnavailableError'
        5XX:
          $ref: '#/components/responses/InternalError'
    patch:
      summary: Update an API specification
      description: |
        Updates a single API specification.
      operationId: updateApiSpecification
      tags:
        - api-specifications
      parameters:
        - $ref: '#/components/parameters/apiSpecificationId'
      requestBody:
        description: Updated API specification object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiSpecification_Update'
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiSpecification_Read'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthenticatedError'
        '403':
          $ref: '#/components/responses/PermissionDeniedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '422':
          $ref: '#/components/responses/InvalidArgumentError'
        '429':
          $ref: '#/components/responses/ResourceExhaustedError'
        '503':
          $ref: '#/components/responses/UnavailableError'
        5XX:
          $ref: '#/components/responses/InternalError'
  /api-specifications/{apiSpecificationId}/versions:
    get:
      summary: List all API specification versions
      description: |-
        Returns a list of API specification versions.

        <details>
        <summary>Details</summary>

        ## Sort expressions

        The following table lists the field names and directions you can use in a sort expression.

        | Field               | Type        | Direction | Example                         |
        |---------------------|-------------|-----------|---------------------------------|
        | `id`                | `uuid`      | `asc`     | `?sort=asc(id)`                 |
        |                     |             | `desc`    | `?sort=desc(id)`                |
        | `name`              | `string`    | `asc`     | `?sort=asc(name)`               |
        |                     |             | `desc`    | `?sort=desc(name)`              |
        | `publishTime`       | `date-time` | `asc`     | `?sort=asc(publishTime)`        |
        |                     |             | `desc`    | `?sort=desc(publishTime)`       |
        | `semVer.major`      | `integer`   | `asc`     | `?sort=asc(semVer.major)`       |
        |                     |             | `desc`    | `?sort=desc(semVer.major)`      |
        | `semVer.minor`      | `integer`   | `asc`     | `?sort=asc(semVer.minor)`       |
        |                     |             | `desc`    | `?sort=desc(semVer.minor)`      |
        | `semVer.patch`      | `integer`   | `asc`     | `?sort=asc(semVer.patch)`       |
        |                     |             | `desc`    | `?sort=desc(semVer.patch)`      |
        | `semVer.preRelease` | `string`    | `asc`     | `?sort=asc(semVer.preRelease)`  |
        |                     |             | `desc`    | `?sort=desc(semVer.preRelease)` |
        | `semVer.build`      | `string`    | `asc`     | `?sort=asc(semVer.build)`       |
        |                     |             | `desc`    | `?sort=desc(semVer.build)`      |
        | `createTime`        | `date-time` | `asc`     | `?sort=asc(createTime)`         |
        |                     |             | `desc`    | `?sort=desc(createTime)`        |
        | `updateTime`        | `date-time` | `asc`     | `?sort=asc(updateTime)`         |
        |                     |             | `desc`    | `?sort=desc(updateTime)`        |

        ### Default sort expression

        If the `sort` parameter is omitted, the default sort expression is used:

        ```
        ?sort=desc(publishTime)
        ```

        This causes results to be sorted by `publishTime` in descending order (from most recent to oldest).

        ## Filter expressions

        The following table lists the field names and operators you can use in a filter expression.

        | Field                                             | Type                    | Operator | Example                                                                          |
        |---------------------------------------------------|-------------------------|----------|----------------------------------------------------------------------------------|
        | `id`                                              | `uuid`                  | `eq`     | `?filter=eq(id,"533d3fe3-bccc-405a-9904-4f516e892856")`                          |
        |                                                   |                         | `neq`    | `?filter=neq(id,"533d3fe3-bccc-405a-9904-4f516e892856")`                         |
        | `name`                                            | `string`                | `eq`     | `?filter=eq(name,"1.2.0")`                                                       |
        |                                                   |                         | `neq`    | `?filter=neq(name,"1.2.0")`                                                      |
        |                                                   |                         | `has`    | `?filter=has(name,"1.2")`                                                        |
        |                                                   |                         | `stw`    | `?filter=stw(name,"1.2")`                                                        |
        |                                                   |                         | `enw`    | `?filter=enw(name,"2.0")`                                                        |
        |                                                   |                         | `reg`    | `?filter=reg(name,"^[a-zA-Z0-9 ]+$")`                                            |
        | `publishTime`                                     | `date-time`             | `eq`     | `?filter=eq(publishTime,"2024-03-16T14:15:30.500Z")`                             |
        |                                                   |                         | `neq`    | `?filter=neq(publishTime,"2024-03-16T14:15:30.500Z")`                            |
        |                                                   |                         | `gt`     | `?filter=gt(publishTime,"2024-03-16T14:15:30.500Z")`                             |
        |                                                   |                         | `gte`    | `?filter=gte(publishTime,"2024-03-16T14:15:30.500Z")`                            |
        |                                                   |                         | `lt`     | `?filter=lt(publishTime,"2024-03-16T14:15:30.500Z")`                             |
        |                                                   |                         | `lte`    | `?filter=lte(publishTime,"2024-03-16T14:15:30.500Z")`                            |
        | `semVer.major`                                    | `integer`               | `eq`     | `?filter=eq(semVer.major,1)`                                                     |
        |                                                   |                         | `neq`    | `?filter=neq(semVer.major,1)`                                                    |
        |                                                   |                         | `gt`     | `?filter=gt(semVer.major,1)`                                                     |
        |                                                   |                         | `gte`    | `?filter=gte(semVer.major,1)`                                                    |
        |                                                   |                         | `lt`     | `?filter=lt(semVer.major,1)`                                                     |
        |                                                   |                         | `lte`    | `?filter=lte(semVer.major,1)`                                                    |
        | `semVer.minor`                                    | `integer`               | `eq`     | `?filter=eq(semVer.minor,2)`                                                     |
        |                                                   |                         | `neq`    | `?filter=neq(semVer.minor,2)`                                                    |
        |                                                   |                         | `gt`     | `?filter=gt(semVer.minor,2)`                                                     |
        |                                                   |                         | `gte`    | `?filter=gte(semVer.minor,2)`                                                    |
        |                                                   |                         | `lt`     | `?filter=lt(semVer.minor,2)`                                                     |
        |                                                   |                         | `lte`    | `?filter=lte(semVer.minor,2)`                                                    |
        | `semVer.patch`                                    | `integer`               | `eq`     | `?filter=eq(semVer.patch,0)`                                                     |
        |                                                   |                         | `neq`    | `?filter=neq(semVer.patch,0)`                                                    |
        |                                                   |                         | `gt`     | `?filter=gt(semVer.patch,0)`                                                     |
        |                                                   |                         | `gte`    | `?filter=gte(semVer.patch,0)`                                                    |
        |                                                   |                         | `lt`     | `?filter=lt(semVer.patch,0)`                                                     |
        |                                                   |                         | `lte`    | `?filter=lte(semVer.patch,0)`                                                    |
        | `semVer.preRelease`                               | `string`                | `eq`     | `?filter=eq(semVer.preRelease,"beta")`                                           |
        |                                                   |                         | `neq`    | `?filter=neq(semVer.preRelease,"beta")`                                          |
        |                                                   |                         | `has`    | `?filter=has(semVer.preRelease,"be")`                                            |
        |                                                   |                         | `stw`    | `?filter=stw(semVer.preRelease,"be")`                                            |
        |                                                   |                         | `enw`    | `?filter=enw(semVer.preRelease,"ta")`                                            |
        |                                                   |                         | `reg`    | `?filter=reg(semVer.preRelease,"^[a-zA-Z0-9 ]+$")`                               |
        | `semVer.build`                                    | `string`                | `eq`     | `?filter=eq(semVer.build,"exp.sha.5114f85")`                                     |
        |                                                   |                         | `neq`    | `?filter=neq(semVer.build,"exp.sha.5114f85")`                                    |
        |                                                   |                         | `has`    | `?filter=has(semVer.build,"exp.sha")`                                            |
        |                                                   |                         | `stw`    | `?filter=stw(semVer.build,"exp.sha")`                                            |
        |                                                   |                         | `enw`    | `?filter=enw(semVer.build,"5114f85")`                                            |
        |                                                   |                         | `reg`    | `?filter=reg(semVer.build,"^[a-zA-Z0-9 ]+$")`                                    |
        | `lifecycleState`                                  | `ProductLifecycleState` | `eq`     | `?filter=eq(lifecycleState,"PUBLISHED")`                                         |
        |                                                   |                         | `neq`    | `?filter=neq(lifecycleState,"PUBLISHED")`                                        |
        | `lastDeclarationOfConformity.requirementsVersion` | `string`                | `eq`     | `?filter=eq(lastDeclarationOfConformity.requirementsVersion,"1.2.0")`            |
        |                                                   |                         | `neq`    | `?filter=neq(lastDeclarationOfConformity.requirementsVersion,"1.2.0")`           |
        |                                                   |                         | `has`    | `?filter=has(lastDeclarationOfConformity.requirementsVersion,"1.2")`             |
        |                                                   |                         | `stw`    | `?filter=stw(lastDeclarationOfConformity.requirementsVersion,"1.2")`             |
        |                                                   |                         | `enw`    | `?filter=enw(lastDeclarationOfConformity.requirementsVersion,"2.0")`             |
        |                                                   |                         | `reg`    | `?filter=reg(lastDeclarationOfConformity.requirementsVersion,"^[a-zA-Z0-9 ]+$")` |
        | `lastDeclarationOfConformity.rankingLevel`        | `ApiRankingLevel`       | `eq`     | `?filter=eq(lastDeclarationOfConformity.rankingLevel,"OPEN_API")`                |
        |                                                   |                         | `neq`    | `?filter=neq(lastDeclarationOfConformity.rankingLevel,"OPEN_API")`               |
        | `createTime`                                      | `date-time`             | `eq`     | `?filter=eq(createTime,"2024-03-16T14:15:30.500Z")`                              |
        |                                                   |                         | `neq`    | `?filter=neq(createTime,"2024-03-16T14:15:30.500Z")`                             |
        |                                                   |                         | `gt`     | `?filter=gt(createTime,"2024-03-16T14:15:30.500Z")`                              |
        |                                                   |                         | `gte`    | `?filter=gte(createTime,"2024-03-16T14:15:30.500Z")`                             |
        |                                                   |                         | `lt`     | `?filter=lt(createTime,"2024-03-16T14:15:30.500Z")`                              |
        |                                                   |                         | `lte`    | `?filter=lte(createTime,"2024-03-16T14:15:30.500Z")`                             |
        | `updateTime`                                      | `date-time`             | `eq`     | `?filter=eq(updateTime,"2024-03-16T14:15:30.500Z")`                              |
        |                                                   |                         | `neq`    | `?filter=neq(updateTime,"2024-03-16T14:15:30.500Z")`                             |
        |                                                   |                         | `gt`     | `?filter=gt(updateTime,"2024-03-16T14:15:30.500Z")`                              |
        |                                                   |                         | `gte`    | `?filter=gte(updateTime,"2024-03-16T14:15:30.500Z")`                             |
        |                                                   |                         | `lt`     | `?filter=lt(updateTime,"2024-03-16T14:15:30.500Z")`                              |
        |                                                   |                         | `lte`    | `?filter=lte(updateTime,"2024-03-16T14:15:30.500Z")`                             |

        </details>
      operationId: listApiSpecificationVersions
      tags:
        - api-specification.versions
      parameters:
        - $ref: '#/components/parameters/apiSpecificationId'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/skip'
        - $ref: '#/components/parameters/sort'
        - $ref: '#/components/parameters/filter'
        - $ref: '#/components/parameters/count'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiSpecificationVersion_CreateRead'
          headers:
            Total-Count:
              $ref: '#/components/headers/Total-Count'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthenticatedError'
        '403':
          $ref: '#/components/responses/PermissionDeniedError'
        '422':
          $ref: '#/components/responses/InvalidArgumentError'
        '429':
          $ref: '#/components/responses/ResourceExhaustedError'
        '503':
          $ref: '#/components/responses/UnavailableError'
        5XX:
          $ref: '#/components/responses/InternalError'
    post:
      summary: Add an API specification version
      description: |
        Adds an API specification version to the collection.
      operationId: addApiSpecificationVersion
      tags:
        - api-specification.versions
      parameters:
        - $ref: '#/components/parameters/apiSpecificationId'
      requestBody:
        description: API specification version object to add
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiSpecificationVersion_CreateRead'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiSpecificationVersion_CreateRead'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthenticatedError'
        '403':
          $ref: '#/components/responses/PermissionDeniedError'
        '422':
          $ref: '#/components/responses/InvalidArgumentError'
        '429':
          $ref: '#/components/responses/ResourceExhaustedError'
        '503':
          $ref: '#/components/responses/UnavailableError'
        5XX:
          $ref: '#/components/responses/InternalError'
  /api-specifications/{apiSpecificationId}/versions/{versionId}:
    get:
      summary: Get an API specification version by ID
      description: |
        Returns a single API specification version.
      operationId: getApiSpecificationVersionById
      tags:
        - api-specification.versions
      parameters:
        - $ref: '#/components/parameters/apiSpecificationId'
        - $ref: '#/components/parameters/versionId'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiSpecificationVersion_CreateRead'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthenticatedError'
        '403':
          $ref: '#/components/responses/PermissionDeniedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '422':
          $ref: '#/components/responses/InvalidArgumentError'
        '429':
          $ref: '#/components/responses/ResourceExhaustedError'
        '503':
          $ref: '#/components/responses/UnavailableError'
        5XX:
          $ref: '#/components/responses/InternalError'
    patch:
      summary: Update an API specification version
      description: |
        Updates a single API specification version.
      operationId: updateApiSpecificationVersion
      tags:
        - api-specification.versions
      parameters:
        - $ref: '#/components/parameters/apiSpecificationId'
        - $ref: '#/components/parameters/versionId'
      requestBody:
        description: Updated API specification version object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiSpecificationVersion_Update'
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiSpecificationVersion_CreateRead'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthenticatedError'
        '403':
          $ref: '#/components/responses/PermissionDeniedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '422':
          $ref: '#/components/responses/InvalidArgumentError'
        '429':
          $ref: '#/components/responses/ResourceExhaustedError'
        '503':
          $ref: '#/components/responses/UnavailableError'
        5XX:
          $ref: '#/components/responses/InternalError'
  /api-specifications/{apiSpecificationId}/versions/{versionId}/urls:
    get:
      summary: List all API specification version URLs
      description: |-
        Returns a list of API specification version URLs.

        <details>
        <summary>Details</summary>

        ## Sort expressions

        The following table lists the field names and directions you can use in a sort expression.

        | Field               | Type        | Direction | Example                         |
        |---------------------|-------------|-----------|---------------------------------|
        | `id`                | `uuid`      | `asc`     | `?sort=asc(id)`                 |
        |                     |             | `desc`    | `?sort=desc(id)`                |
        | `createTime`        | `date-time` | `asc`     | `?sort=asc(createTime)`         |
        |                     |             | `desc`    | `?sort=desc(createTime)`        |
        | `updateTime`        | `date-time` | `asc`     | `?sort=asc(updateTime)`         |
        |                     |             | `desc`    | `?sort=desc(updateTime)`        |

        ### Default sort expression

        If the `sort` parameter is omitted, the default sort expression is used:

        ```
        ?sort=asc(createTime)
        ```

        This causes results to be sorted by `createTime` in ascending order (from oldest to most recent).

        ## Filter expressions

        The following table lists the field names and operators you can use in a filter expression.

        | Field        | Type                             | Operator | Example                                                  |
        |--------------|----------------------------------|----------|----------------------------------------------------------|
        | `id`         | `uuid`                           | `eq`     | `?filter=eq(id,"533d3fe3-bccc-405a-9904-4f516e892856")`  |
        |              |                                  | `neq`    | `?filter=neq(id,"533d3fe3-bccc-405a-9904-4f516e892856")` |
        | `type`       | `ApiSpecificationVersionUrlType` | `eq`     | `?filter=eq(type,"FUNCTIONAL_DESIGN")`                   |
        |              |                                  | `neq`    | `?filter=neq(type,"FUNCTIONAL_DESIGN")`                  |
        | `createTime` | `date-time`                      | `eq`     | `?filter=eq(createTime,"2024-03-16T14:15:30.500Z")`      |
        |              |                                  | `neq`    | `?filter=neq(createTime,"2024-03-16T14:15:30.500Z")`     |
        |              |                                  | `gt`     | `?filter=gt(createTime,"2024-03-16T14:15:30.500Z")`      |
        |              |                                  | `gte`    | `?filter=gte(createTime,"2024-03-16T14:15:30.500Z")`     |
        |              |                                  | `lt`     | `?filter=lt(createTime,"2024-03-16T14:15:30.500Z")`      |
        |              |                                  | `lte`    | `?filter=lte(createTime,"2024-03-16T14:15:30.500Z")`     |
        | `updateTime` | `date-time`                      | `eq`     | `?filter=eq(updateTime,"2024-03-16T14:15:30.500Z")`      |
        |              |                                  | `neq`    | `?filter=neq(updateTime,"2024-03-16T14:15:30.500Z")`     |
        |              |                                  | `gt`     | `?filter=gt(updateTime,"2024-03-16T14:15:30.500Z")`      |
        |              |                                  | `gte`    | `?filter=gte(updateTime,"2024-03-16T14:15:30.500Z")`     |
        |              |                                  | `lt`     | `?filter=lt(updateTime,"2024-03-16T14:15:30.500Z")`      |
        |              |                                  | `lte`    | `?filter=lte(updateTime,"2024-03-16T14:15:30.500Z")`     |

        </details>
      operationId: listApiSpecificationVersionUrls
      tags:
        - api-specification.version.urls
      parameters:
        - $ref: '#/components/parameters/apiSpecificationId'
        - $ref: '#/components/parameters/versionId'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/skip'
        - $ref: '#/components/parameters/sort'
        - $ref: '#/components/parameters/filter'
        - $ref: '#/components/parameters/count'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiSpecificationVersionUrl_CreateRead'
          headers:
            Total-Count:
              $ref: '#/components/headers/Total-Count'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthenticatedError'
        '403':
          $ref: '#/components/responses/PermissionDeniedError'
        '422':
          $ref: '#/components/responses/InvalidArgumentError'
        '429':
          $ref: '#/components/responses/ResourceExhaustedError'
        '503':
          $ref: '#/components/responses/UnavailableError'
        5XX:
          $ref: '#/components/responses/InternalError'
    post:
      summary: Add an API specification version URL
      description: |
        Adds an API specification version URL to the collection.
      operationId: addApiSpecificationVersionUrl
      tags:
        - api-specification.version.urls
      parameters:
        - $ref: '#/components/parameters/apiSpecificationId'
        - $ref: '#/components/parameters/versionId'
      requestBody:
        description: API specification version URL object to add
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiSpecificationVersionUrl_CreateRead'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiSpecificationVersionUrl_CreateRead'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthenticatedError'
        '403':
          $ref: '#/components/responses/PermissionDeniedError'
        '422':
          $ref: '#/components/responses/InvalidArgumentError'
        '429':
          $ref: '#/components/responses/ResourceExhaustedError'
        '503':
          $ref: '#/components/responses/UnavailableError'
        5XX:
          $ref: '#/components/responses/InternalError'
  /api-specifications/{apiSpecificationId}/versions/{versionId}/urls/{urlId}:
    get:
      summary: Get an API specification version URL by ID
      description: |
        Returns a single API specification version URL.
      operationId: getApiSpecificationVersionUrlById
      tags:
        - api-specification.version.urls
      parameters:
        - $ref: '#/components/parameters/apiSpecificationId'
        - $ref: '#/components/parameters/versionId'
        - $ref: '#/components/parameters/urlId'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiSpecificationVersionUrl_CreateRead'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthenticatedError'
        '403':
          $ref: '#/components/responses/PermissionDeniedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '422':
          $ref: '#/components/responses/InvalidArgumentError'
        '429':
          $ref: '#/components/responses/ResourceExhaustedError'
        '503':
          $ref: '#/components/responses/UnavailableError'
        5XX:
          $ref: '#/components/responses/InternalError'
    patch:
      summary: Update an API specification version URL
      description: |
        Updates a single API specification version URL.
      operationId: updateApiSpecificationVersionUrl
      tags:
        - api-specification.version.urls
      parameters:
        - $ref: '#/components/parameters/apiSpecificationId'
        - $ref: '#/components/parameters/versionId'
        - $ref: '#/components/parameters/urlId'
      requestBody:
        description: Updated API specification version URL object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiSpecificationVersionUrl_Update'
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiSpecificationVersionUrl_CreateRead'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthenticatedError'
        '403':
          $ref: '#/components/responses/PermissionDeniedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '422':
          $ref: '#/components/responses/InvalidArgumentError'
        '429':
          $ref: '#/components/responses/ResourceExhaustedError'
        '503':
          $ref: '#/components/responses/UnavailableError'
        5XX:
          $ref: '#/components/responses/InternalError'
    delete:
      summary: Delete an API specification version URL
      description: |
        Deletes a single API specification version URL.
      operationId: deleteApiSpecificationVersionUrl
      tags:
        - api-specification.version.urls
      parameters:
        - $ref: '#/components/parameters/apiSpecificationId'
        - $ref: '#/components/parameters/versionId'
        - $ref: '#/components/parameters/urlId'
      responses:
        '204':
          $ref: '#/components/responses/EmptyResponse'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthenticatedError'
        '403':
          $ref: '#/components/responses/PermissionDeniedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '422':
          $ref: '#/components/responses/InvalidArgumentError'
        '429':
          $ref: '#/components/responses/ResourceExhaustedError'
        '503':
          $ref: '#/components/responses/UnavailableError'
        5XX:
          $ref: '#/components/responses/InternalError'
  /api-specifications/{apiSpecificationId}/versions/{versionId}/declarations-of-conformity:
    get:
      summary: List all API specification version declarations of conformity
      description: |-
        Returns a list of API specification version declarations of conformity.

        <details>
        <summary>Details</summary>

        ## Sort expressions

        The following table lists the field names and directions you can use in a sort expression.

        | Field               | Type        | Direction | Example                         |
        |---------------------|-------------|-----------|---------------------------------|
        | `id`                | `uuid`      | `asc`     | `?sort=asc(id)`                 |
        |                     |             | `desc`    | `?sort=desc(id)`                |
        | `createTime`        | `date-time` | `asc`     | `?sort=asc(createTime)`         |
        |                     |             | `desc`    | `?sort=desc(createTime)`        |
        | `updateTime`        | `date-time` | `asc`     | `?sort=asc(updateTime)`         |
        |                     |             | `desc`    | `?sort=desc(updateTime)`        |

        ### Default sort expression

        If the `sort` parameter is omitted, the default sort expression is used:

        ```
        ?sort=desc(createTime)
        ```

        This causes results to be sorted by `createTime` in descending order (from most recent to oldest).

        ## Filter expressions

        The following table lists the field names and operators you can use in a filter expression.

        | Field                 | Type              | Operator | Example                                                  |
        |-----------------------|-------------------|----------|----------------------------------------------------------|
        | `id`                  | `uuid`            | `eq`     | `?filter=eq(id,"533d3fe3-bccc-405a-9904-4f516e892856")`  |
        |                       |                   | `neq`    | `?filter=neq(id,"533d3fe3-bccc-405a-9904-4f516e892856")` |
        | `requirementsVersion` | `string`          | `eq`     | `?filter=eq(requirementsVersion,"1.2.0")`                |
        |                       |                   | `neq`    | `?filter=neq(requirementsVersion,"1.2.0")`               |
        |                       |                   | `has`    | `?filter=has(requirementsVersion,"1.2")`                 |
        |                       |                   | `stw`    | `?filter=stw(requirementsVersion,"1.2")`                 |
        |                       |                   | `enw`    | `?filter=enw(requirementsVersion,"2.0")`                 |
        |                       |                   | `reg`    | `?filter=reg(requirementsVersion,"^[a-zA-Z0-9 ]+$")`     |
        | `rankingLevel`        | `ApiRankingLevel` | `eq`     | `?filter=eq(rankingLevel,"OPEN_API")`                    |
        |                       |                   | `neq`    | `?filter=neq(rankingLevel,"OPEN_API")`                   |
        | `createTime`          | `date-time`       | `eq`     | `?filter=eq(createTime,"2024-03-16T14:15:30.500Z")`      |
        |                       |                   | `neq`    | `?filter=neq(createTime,"2024-03-16T14:15:30.500Z")`     |
        |                       |                   | `gt`     | `?filter=gt(createTime,"2024-03-16T14:15:30.500Z")`      |
        |                       |                   | `gte`    | `?filter=gte(createTime,"2024-03-16T14:15:30.500Z")`     |
        |                       |                   | `lt`     | `?filter=lt(createTime,"2024-03-16T14:15:30.500Z")`      |
        |                       |                   | `lte`    | `?filter=lte(createTime,"2024-03-16T14:15:30.500Z")`     |
        | `updateTime`          | `date-time`       | `eq`     | `?filter=eq(updateTime,"2024-03-16T14:15:30.500Z")`      |
        |                       |                   | `neq`    | `?filter=neq(updateTime,"2024-03-16T14:15:30.500Z")`     |
        |                       |                   | `gt`     | `?filter=gt(updateTime,"2024-03-16T14:15:30.500Z")`      |
        |                       |                   | `gte`    | `?filter=gte(updateTime,"2024-03-16T14:15:30.500Z")`     |
        |                       |                   | `lt`     | `?filter=lt(updateTime,"2024-03-16T14:15:30.500Z")`      |
        |                       |                   | `lte`    | `?filter=lte(updateTime,"2024-03-16T14:15:30.500Z")`     |

        </details>
      operationId: listApiSpecificationVersionDeclarationsOfConformity
      tags:
        - api-specification.version.declarations-of-conformity
      parameters:
        - $ref: '#/components/parameters/apiSpecificationId'
        - $ref: '#/components/parameters/versionId'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/skip'
        - $ref: '#/components/parameters/sort'
        - $ref: '#/components/parameters/filter'
        - $ref: '#/components/parameters/count'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiSpecificationVersionDeclarationOfConformity_CreateRead'
          headers:
            Total-Count:
              $ref: '#/components/headers/Total-Count'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthenticatedError'
        '403':
          $ref: '#/components/responses/PermissionDeniedError'
        '422':
          $ref: '#/components/responses/InvalidArgumentError'
        '429':
          $ref: '#/components/responses/ResourceExhaustedError'
        '503':
          $ref: '#/components/responses/UnavailableError'
        5XX:
          $ref: '#/components/responses/InternalError'
    post:
      summary: Add an API specification version declaration of conformity
      description: |
        Adds an API specification version declaration of conformity to the collection.
      operationId: addApiSpecificationVersionDeclarationOfConformity
      tags:
        - api-specification.version.declarations-of-conformity
      parameters:
        - $ref: '#/components/parameters/apiSpecificationId'
        - $ref: '#/components/parameters/versionId'
      requestBody:
        description: API specification version declaration of conformity object to add
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiSpecificationVersionDeclarationOfConformity_CreateRead'
            examples:
              ApiSpecificationVersionDeclarationOfConformity_1-2-0_REST:
                summary: 1.2.0 REST
                description: |
                  Example of an API specification version declaration of conformity using API requirements version `1.2.0`.
                  For architectural style `REST`. See property `architecturalStyle` of schema `ApiSpecification_Create`.
                value:
                  requirementsVersion: 1.2.0
                  requirements:
                    SD001:
                      conformityType: NOT_EVALUATED
                      remarks: This is an example text.
                    SD001.001:
                      conformityType: NOT_EVALUATED
                    SD001.002:
                      conformityType: NOT_EVALUATED
                    SD001.003:
                      conformityType: NOT_EVALUATED
                    SD001.004:
                      conformityType: NOT_EVALUATED
                    SD001.005:
                      conformityType: NOT_EVALUATED
                    SD001.006:
                      conformityType: NOT_EVALUATED
                    SD001.007:
                      conformityType: NOT_EVALUATED
                    SD001.008:
                      conformityType: NOT_EVALUATED
                    SD001.009:
                      conformityType: NOT_EVALUATED
                    SD001.010:
                      conformityType: NOT_EVALUATED
                    SD001.011:
                      conformityType: NOT_EVALUATED
                    SD001.012:
                      conformityType: NOT_EVALUATED
                    SD001.013:
                      conformityType: NOT_EVALUATED
                    SD001.014:
                      conformityType: NOT_EVALUATED
                    SD001.015:
                      conformityType: NOT_EVALUATED
                    SD001.016:
                      conformityType: NOT_EVALUATED
                    SD001.017:
                      conformityType: NOT_EVALUATED
                    SD002:
                      conformityType: NOT_EVALUATED
                    SD002.001:
                      conformityType: NOT_EVALUATED
                    SD002.002:
                      conformityType: NOT_EVALUATED
                    SD002.003:
                      conformityType: NOT_EVALUATED
                    SD003:
                      conformityType: NOT_EVALUATED
                    SD003.001:
                      conformityType: NOT_EVALUATED
                    SD003.002:
                      conformityType: NOT_EVALUATED
                    SD004:
                      conformityType: NOT_EVALUATED
                    SD004.001:
                      conformityType: NOT_EVALUATED
                    SD004.002:
                      conformityType: NOT_EVALUATED
                    SD004.003:
                      conformityType: NOT_EVALUATED
                    SD004.004:
                      conformityType: NOT_EVALUATED
                    SD005:
                      conformityType: NOT_EVALUATED
                    SD005.001:
                      conformityType: NOT_EVALUATED
                    SD005.002:
                      conformityType: NOT_EVALUATED
                    SD009:
                      conformityType: NOT_EVALUATED
                    SD009.001:
                      conformityType: NOT_EVALUATED
                    SD009.002:
                      conformityType: NOT_EVALUATED
                    SD009.003:
                      conformityType: NOT_EVALUATED
                    SD010:
                      conformityType: NOT_EVALUATED
                    SD011:
                      conformityType: NOT_EVALUATED
                    SD012:
                      conformityType: NOT_EVALUATED
                    SD013:
                      conformityType: NOT_EVALUATED
                    SD014:
                      conformityType: NOT_EVALUATED
                    DI001:
                      conformityType: NOT_EVALUATED
                    DI001.001:
                      conformityType: NOT_EVALUATED
                    DI001.002:
                      conformityType: NOT_EVALUATED
                    DI001.003:
                      conformityType: NOT_EVALUATED
                    LM001:
                      conformityType: NOT_EVALUATED
                    LM001.001:
                      conformityType: NOT_EVALUATED
                    LM001.002:
                      conformityType: NOT_EVALUATED
                    LM001.003:
                      conformityType: NOT_EVALUATED
                    LM001.004:
                      conformityType: NOT_EVALUATED
                    LM002:
                      conformityType: NOT_EVALUATED
                    LM002.001:
                      conformityType: NOT_EVALUATED
                    LM002.002:
                      conformityType: NOT_EVALUATED
                    LM002.003:
                      conformityType: NOT_EVALUATED
                    LM008:
                      conformityType: NOT_EVALUATED
                    DR001:
                      conformityType: NOT_EVALUATED
                    DR012:
                      conformityType: NOT_EVALUATED
                    DR-R001:
                      conformityType: NOT_EVALUATED
                    DR-R002:
                      conformityType: NOT_EVALUATED
                    SC001:
                      conformityType: NOT_EVALUATED
                    SC006:
                      conformityType: NOT_EVALUATED
                    SC007:
                      conformityType: NOT_EVALUATED
                    SC008:
                      conformityType: NOT_EVALUATED
                    SC009:
                      conformityType: NOT_EVALUATED
                    SC-R001:
                      conformityType: NOT_EVALUATED
                    SC-R002:
                      conformityType: NOT_EVALUATED
                    SC-R003:
                      conformityType: NOT_EVALUATED
                    IS001:
                      conformityType: NOT_EVALUATED
                    IS003.001:
                      conformityType: NOT_EVALUATED
                    IS003.002:
                      conformityType: NOT_EVALUATED
                    IS003:
                      conformityType: NOT_EVALUATED
              ApiSpecificationVersionDeclarationOfConformity_1-2-0_SOAP:
                summary: 1.2.0 SOAP
                description: |
                  Example of an API specification version declaration of conformity using API requirements version `1.2.0`.
                  For architectural style `SOAP`. See property `architecturalStyle` of schema `ApiSpecification_Create`.
                value:
                  requirementsVersion: 1.2.0
                  requirements:
                    SD001:
                      conformityType: NOT_EVALUATED
                      remarks: This is an example text.
                    SD001.001:
                      conformityType: NOT_EVALUATED
                    SD001.002:
                      conformityType: NOT_EVALUATED
                    SD001.003:
                      conformityType: NOT_EVALUATED
                    SD001.004:
                      conformityType: NOT_EVALUATED
                    SD001.005:
                      conformityType: NOT_EVALUATED
                    SD001.006:
                      conformityType: NOT_EVALUATED
                    SD001.007:
                      conformityType: NOT_EVALUATED
                    SD001.008:
                      conformityType: NOT_EVALUATED
                    SD001.009:
                      conformityType: NOT_EVALUATED
                    SD001.010:
                      conformityType: NOT_EVALUATED
                    SD001.011:
                      conformityType: NOT_EVALUATED
                    SD001.012:
                      conformityType: NOT_EVALUATED
                    SD001.013:
                      conformityType: NOT_EVALUATED
                    SD001.014:
                      conformityType: NOT_EVALUATED
                    SD001.015:
                      conformityType: NOT_EVALUATED
                    SD001.016:
                      conformityType: NOT_EVALUATED
                    SD001.017:
                      conformityType: NOT_EVALUATED
                    SD002:
                      conformityType: NOT_EVALUATED
                    SD002.001:
                      conformityType: NOT_EVALUATED
                    SD002.002:
                      conformityType: NOT_EVALUATED
                    SD002.003:
                      conformityType: NOT_EVALUATED
                    SD003:
                      conformityType: NOT_EVALUATED
                    SD003.001:
                      conformityType: NOT_EVALUATED
                    SD003.002:
                      conformityType: NOT_EVALUATED
                    SD004:
                      conformityType: NOT_EVALUATED
                    SD004.001:
                      conformityType: NOT_EVALUATED
                    SD004.002:
                      conformityType: NOT_EVALUATED
                    SD004.003:
                      conformityType: NOT_EVALUATED
                    SD004.004:
                      conformityType: NOT_EVALUATED
                    SD005:
                      conformityType: NOT_EVALUATED
                    SD005.001:
                      conformityType: NOT_EVALUATED
                    SD005.002:
                      conformityType: NOT_EVALUATED
                    SD009:
                      conformityType: NOT_EVALUATED
                    SD009.001:
                      conformityType: NOT_EVALUATED
                    SD009.002:
                      conformityType: NOT_EVALUATED
                    SD009.003:
                      conformityType: NOT_EVALUATED
                    SD010:
                      conformityType: NOT_EVALUATED
                    SD011:
                      conformityType: NOT_EVALUATED
                    SD012:
                      conformityType: NOT_EVALUATED
                    SD013:
                      conformityType: NOT_EVALUATED
                    SD014:
                      conformityType: NOT_EVALUATED
                    DI001:
                      conformityType: NOT_EVALUATED
                    DI001.001:
                      conformityType: NOT_EVALUATED
                    DI001.002:
                      conformityType: NOT_EVALUATED
                    DI001.003:
                      conformityType: NOT_EVALUATED
                    LM001:
                      conformityType: NOT_EVALUATED
                    LM001.001:
                      conformityType: NOT_EVALUATED
                    LM001.002:
                      conformityType: NOT_EVALUATED
                    LM001.003:
                      conformityType: NOT_EVALUATED
                    LM001.004:
                      conformityType: NOT_EVALUATED
                    LM002:
                      conformityType: NOT_EVALUATED
                    LM002.001:
                      conformityType: NOT_EVALUATED
                    LM002.002:
                      conformityType: NOT_EVALUATED
                    LM002.003:
                      conformityType: NOT_EVALUATED
                    LM008:
                      conformityType: NOT_EVALUATED
                    DR001:
                      conformityType: NOT_EVALUATED
                    DR012:
                      conformityType: NOT_EVALUATED
                    DR-S001:
                      conformityType: NOT_EVALUATED
                    SC001:
                      conformityType: NOT_EVALUATED
                    SC006:
                      conformityType: NOT_EVALUATED
                    SC007:
                      conformityType: NOT_EVALUATED
                    SC008:
                      conformityType: NOT_EVALUATED
                    SC009:
                      conformityType: NOT_EVALUATED
                    SC-S001:
                      conformityType: NOT_EVALUATED
                    SC-S002:
                      conformityType: NOT_EVALUATED
                    IS001:
                      conformityType: NOT_EVALUATED
                    IS003.001:
                      conformityType: NOT_EVALUATED
                    IS003.002:
                      conformityType: NOT_EVALUATED
                    IS003:
                      conformityType: NOT_EVALUATED
              ApiSpecificationVersionDeclarationOfConformity_1-2-0_GRAPHQL:
                summary: 1.2.0 GRAPHQL
                description: |
                  Example of an API specification version declaration of conformity using API requirements version `1.2.0`.
                  For architectural style `GRAPHQL`. See property `architecturalStyle` of schema `ApiSpecification_Create`.
                value:
                  requirementsVersion: 1.2.0
                  requirements:
                    SD001:
                      conformityType: NOT_EVALUATED
                      remarks: This is an example text.
                    SD001.001:
                      conformityType: NOT_EVALUATED
                    SD001.002:
                      conformityType: NOT_EVALUATED
                    SD001.003:
                      conformityType: NOT_EVALUATED
                    SD001.004:
                      conformityType: NOT_EVALUATED
                    SD001.005:
                      conformityType: NOT_EVALUATED
                    SD001.006:
                      conformityType: NOT_EVALUATED
                    SD001.007:
                      conformityType: NOT_EVALUATED
                    SD001.008:
                      conformityType: NOT_EVALUATED
                    SD001.009:
                      conformityType: NOT_EVALUATED
                    SD001.010:
                      conformityType: NOT_EVALUATED
                    SD001.011:
                      conformityType: NOT_EVALUATED
                    SD001.012:
                      conformityType: NOT_EVALUATED
                    SD001.013:
                      conformityType: NOT_EVALUATED
                    SD001.014:
                      conformityType: NOT_EVALUATED
                    SD001.015:
                      conformityType: NOT_EVALUATED
                    SD001.016:
                      conformityType: NOT_EVALUATED
                    SD001.017:
                      conformityType: NOT_EVALUATED
                    SD002:
                      conformityType: NOT_EVALUATED
                    SD002.001:
                      conformityType: NOT_EVALUATED
                    SD002.002:
                      conformityType: NOT_EVALUATED
                    SD002.003:
                      conformityType: NOT_EVALUATED
                    SD003:
                      conformityType: NOT_EVALUATED
                    SD003.001:
                      conformityType: NOT_EVALUATED
                    SD003.002:
                      conformityType: NOT_EVALUATED
                    SD004:
                      conformityType: NOT_EVALUATED
                    SD004.001:
                      conformityType: NOT_EVALUATED
                    SD004.002:
                      conformityType: NOT_EVALUATED
                    SD004.003:
                      conformityType: NOT_EVALUATED
                    SD004.004:
                      conformityType: NOT_EVALUATED
                    SD005:
                      conformityType: NOT_EVALUATED
                    SD005.001:
                      conformityType: NOT_EVALUATED
                    SD005.002:
                      conformityType: NOT_EVALUATED
                    SD009:
                      conformityType: NOT_EVALUATED
                    SD009.001:
                      conformityType: NOT_EVALUATED
                    SD009.002:
                      conformityType: NOT_EVALUATED
                    SD009.003:
                      conformityType: NOT_EVALUATED
                    SD010:
                      conformityType: NOT_EVALUATED
                    SD011:
                      conformityType: NOT_EVALUATED
                    SD012:
                      conformityType: NOT_EVALUATED
                    SD013:
                      conformityType: NOT_EVALUATED
                    SD014:
                      conformityType: NOT_EVALUATED
                    DI001:
                      conformityType: NOT_EVALUATED
                    DI001.001:
                      conformityType: NOT_EVALUATED
                    DI001.002:
                      conformityType: NOT_EVALUATED
                    DI001.003:
                      conformityType: NOT_EVALUATED
                    LM001:
                      conformityType: NOT_EVALUATED
                    LM001.001:
                      conformityType: NOT_EVALUATED
                    LM001.002:
                      conformityType: NOT_EVALUATED
                    LM001.003:
                      conformityType: NOT_EVALUATED
                    LM001.004:
                      conformityType: NOT_EVALUATED
                    LM002:
                      conformityType: NOT_EVALUATED
                    LM002.001:
                      conformityType: NOT_EVALUATED
                    LM002.002:
                      conformityType: NOT_EVALUATED
                    LM002.003:
                      conformityType: NOT_EVALUATED
                    LM008:
                      conformityType: NOT_EVALUATED
                    DR001:
                      conformityType: NOT_EVALUATED
                    DR012:
                      conformityType: NOT_EVALUATED
                    SC001:
                      conformityType: NOT_EVALUATED
                    SC006:
                      conformityType: NOT_EVALUATED
                    SC007:
                      conformityType: NOT_EVALUATED
                    SC008:
                      conformityType: NOT_EVALUATED
                    SC009:
                      conformityType: NOT_EVALUATED
                    IS001:
                      conformityType: NOT_EVALUATED
                    IS003.001:
                      conformityType: NOT_EVALUATED
                    IS003.002:
                      conformityType: NOT_EVALUATED
                    IS003:
                      conformityType: NOT_EVALUATED
              ApiSpecificationVersionDeclarationOfConformity_1-2-0_ODATA:
                summary: 1.2.0 ODATA
                description: |
                  Example of an API specification version declaration of conformity using API requirements version `1.2.0`.
                  For architectural style `ODATA`. See property `architecturalStyle` of schema `ApiSpecification_Create`.
                value:
                  requirementsVersion: 1.2.0
                  requirements:
                    SD001:
                      conformityType: NOT_EVALUATED
                      remarks: This is an example text.
                    SD001.001:
                      conformityType: NOT_EVALUATED
                    SD001.002:
                      conformityType: NOT_EVALUATED
                    SD001.003:
                      conformityType: NOT_EVALUATED
                    SD001.004:
                      conformityType: NOT_EVALUATED
                    SD001.005:
                      conformityType: NOT_EVALUATED
                    SD001.006:
                      conformityType: NOT_EVALUATED
                    SD001.007:
                      conformityType: NOT_EVALUATED
                    SD001.008:
                      conformityType: NOT_EVALUATED
                    SD001.009:
                      conformityType: NOT_EVALUATED
                    SD001.010:
                      conformityType: NOT_EVALUATED
                    SD001.011:
                      conformityType: NOT_EVALUATED
                    SD001.012:
                      conformityType: NOT_EVALUATED
                    SD001.013:
                      conformityType: NOT_EVALUATED
                    SD001.014:
                      conformityType: NOT_EVALUATED
                    SD001.015:
                      conformityType: NOT_EVALUATED
                    SD001.016:
                      conformityType: NOT_EVALUATED
                    SD001.017:
                      conformityType: NOT_EVALUATED
                    SD002:
                      conformityType: NOT_EVALUATED
                    SD002.001:
                      conformityType: NOT_EVALUATED
                    SD002.002:
                      conformityType: NOT_EVALUATED
                    SD002.003:
                      conformityType: NOT_EVALUATED
                    SD003:
                      conformityType: NOT_EVALUATED
                    SD003.001:
                      conformityType: NOT_EVALUATED
                    SD003.002:
                      conformityType: NOT_EVALUATED
                    SD004:
                      conformityType: NOT_EVALUATED
                    SD004.001:
                      conformityType: NOT_EVALUATED
                    SD004.002:
                      conformityType: NOT_EVALUATED
                    SD004.003:
                      conformityType: NOT_EVALUATED
                    SD004.004:
                      conformityType: NOT_EVALUATED
                    SD005:
                      conformityType: NOT_EVALUATED
                    SD005.001:
                      conformityType: NOT_EVALUATED
                    SD005.002:
                      conformityType: NOT_EVALUATED
                    SD009:
                      conformityType: NOT_EVALUATED
                    SD009.001:
                      conformityType: NOT_EVALUATED
                    SD009.002:
                      conformityType: NOT_EVALUATED
                    SD009.003:
                      conformityType: NOT_EVALUATED
                    SD010:
                      conformityType: NOT_EVALUATED
                    SD011:
                      conformityType: NOT_EVALUATED
                    SD012:
                      conformityType: NOT_EVALUATED
                    SD013:
                      conformityType: NOT_EVALUATED
                    SD014:
                      conformityType: NOT_EVALUATED
                    DI001:
                      conformityType: NOT_EVALUATED
                    DI001.001:
                      conformityType: NOT_EVALUATED
                    DI001.002:
                      conformityType: NOT_EVALUATED
                    DI001.003:
                      conformityType: NOT_EVALUATED
                    LM001:
                      conformityType: NOT_EVALUATED
                    LM001.001:
                      conformityType: NOT_EVALUATED
                    LM001.002:
                      conformityType: NOT_EVALUATED
                    LM001.003:
                      conformityType: NOT_EVALUATED
                    LM001.004:
                      conformityType: NOT_EVALUATED
                    LM002:
                      conformityType: NOT_EVALUATED
                    LM002.001:
                      conformityType: NOT_EVALUATED
                    LM002.002:
                      conformityType: NOT_EVALUATED
                    LM002.003:
                      conformityType: NOT_EVALUATED
                    LM008:
                      conformityType: NOT_EVALUATED
                    DR001:
                      conformityType: NOT_EVALUATED
                    DR012:
                      conformityType: NOT_EVALUATED
                    SC001:
                      conformityType: NOT_EVALUATED
                    SC006:
                      conformityType: NOT_EVALUATED
                    SC007:
                      conformityType: NOT_EVALUATED
                    SC008:
                      conformityType: NOT_EVALUATED
                    SC009:
                      conformityType: NOT_EVALUATED
                    IS001:
                      conformityType: NOT_EVALUATED
                    IS003.001:
                      conformityType: NOT_EVALUATED
                    IS003.002:
                      conformityType: NOT_EVALUATED
                    IS003:
                      conformityType: NOT_EVALUATED
              ApiSpecificationVersionDeclarationOfConformity_1-2-0_GRPC:
                summary: 1.2.0 GRPC
                description: |
                  Example of an API specification version declaration of conformity using API requirements version `1.2.0`.
                  For architectural style `GRPC`. See property `architecturalStyle` of schema `ApiSpecification_Create`.
                value:
                  requirementsVersion: 1.2.0
                  requirements:
                    SD001:
                      conformityType: NOT_EVALUATED
                      remarks: This is an example text.
                    SD001.001:
                      conformityType: NOT_EVALUATED
                    SD001.002:
                      conformityType: NOT_EVALUATED
                    SD001.003:
                      conformityType: NOT_EVALUATED
                    SD001.004:
                      conformityType: NOT_EVALUATED
                    SD001.005:
                      conformityType: NOT_EVALUATED
                    SD001.006:
                      conformityType: NOT_EVALUATED
                    SD001.007:
                      conformityType: NOT_EVALUATED
                    SD001.008:
                      conformityType: NOT_EVALUATED
                    SD001.009:
                      conformityType: NOT_EVALUATED
                    SD001.010:
                      conformityType: NOT_EVALUATED
                    SD001.011:
                      conformityType: NOT_EVALUATED
                    SD001.012:
                      conformityType: NOT_EVALUATED
                    SD001.013:
                      conformityType: NOT_EVALUATED
                    SD001.014:
                      conformityType: NOT_EVALUATED
                    SD001.015:
                      conformityType: NOT_EVALUATED
                    SD001.016:
                      conformityType: NOT_EVALUATED
                    SD001.017:
                      conformityType: NOT_EVALUATED
                    SD002:
                      conformityType: NOT_EVALUATED
                    SD002.001:
                      conformityType: NOT_EVALUATED
                    SD002.002:
                      conformityType: NOT_EVALUATED
                    SD002.003:
                      conformityType: NOT_EVALUATED
                    SD003:
                      conformityType: NOT_EVALUATED
                    SD003.001:
                      conformityType: NOT_EVALUATED
                    SD003.002:
                      conformityType: NOT_EVALUATED
                    SD004:
                      conformityType: NOT_EVALUATED
                    SD004.001:
                      conformityType: NOT_EVALUATED
                    SD004.002:
                      conformityType: NOT_EVALUATED
                    SD004.003:
                      conformityType: NOT_EVALUATED
                    SD004.004:
                      conformityType: NOT_EVALUATED
                    SD005:
                      conformityType: NOT_EVALUATED
                    SD005.001:
                      conformityType: NOT_EVALUATED
                    SD005.002:
                      conformityType: NOT_EVALUATED
                    SD009:
                      conformityType: NOT_EVALUATED
                    SD009.001:
                      conformityType: NOT_EVALUATED
                    SD009.002:
                      conformityType: NOT_EVALUATED
                    SD009.003:
                      conformityType: NOT_EVALUATED
                    SD010:
                      conformityType: NOT_EVALUATED
                    SD011:
                      conformityType: NOT_EVALUATED
                    SD012:
                      conformityType: NOT_EVALUATED
                    SD013:
                      conformityType: NOT_EVALUATED
                    SD014:
                      conformityType: NOT_EVALUATED
                    DI001:
                      conformityType: NOT_EVALUATED
                    DI001.001:
                      conformityType: NOT_EVALUATED
                    DI001.002:
                      conformityType: NOT_EVALUATED
                    DI001.003:
                      conformityType: NOT_EVALUATED
                    LM001:
                      conformityType: NOT_EVALUATED
                    LM001.001:
                      conformityType: NOT_EVALUATED
                    LM001.002:
                      conformityType: NOT_EVALUATED
                    LM001.003:
                      conformityType: NOT_EVALUATED
                    LM001.004:
                      conformityType: NOT_EVALUATED
                    LM002:
                      conformityType: NOT_EVALUATED
                    LM002.001:
                      conformityType: NOT_EVALUATED
                    LM002.002:
                      conformityType: NOT_EVALUATED
                    LM002.003:
                      conformityType: NOT_EVALUATED
                    LM008:
                      conformityType: NOT_EVALUATED
                    DR001:
                      conformityType: NOT_EVALUATED
                    DR012:
                      conformityType: NOT_EVALUATED
                    SC001:
                      conformityType: NOT_EVALUATED
                    SC006:
                      conformityType: NOT_EVALUATED
                    SC007:
                      conformityType: NOT_EVALUATED
                    SC008:
                      conformityType: NOT_EVALUATED
                    SC009:
                      conformityType: NOT_EVALUATED
                    IS001:
                      conformityType: NOT_EVALUATED
                    IS003.001:
                      conformityType: NOT_EVALUATED
                    IS003.002:
                      conformityType: NOT_EVALUATED
                    IS003:
                      conformityType: NOT_EVALUATED
              ApiSpecificationVersionDeclarationOfConformity_1-2-0_OTHER:
                summary: 1.2.0 OTHER
                description: |
                  Example of an API specification version declaration of conformity using API requirements version `1.2.0`.
                  For architectural style `OTHER`. See property `architecturalStyle` of schema `ApiSpecification_Create`.
                value:
                  requirementsVersion: 1.2.0
                  requirements:
                    SD001:
                      conformityType: NOT_EVALUATED
                      remarks: This is an example text.
                    SD001.001:
                      conformityType: NOT_EVALUATED
                    SD001.002:
                      conformityType: NOT_EVALUATED
                    SD001.003:
                      conformityType: NOT_EVALUATED
                    SD001.004:
                      conformityType: NOT_EVALUATED
                    SD001.005:
                      conformityType: NOT_EVALUATED
                    SD001.006:
                      conformityType: NOT_EVALUATED
                    SD001.007:
                      conformityType: NOT_EVALUATED
                    SD001.008:
                      conformityType: NOT_EVALUATED
                    SD001.009:
                      conformityType: NOT_EVALUATED
                    SD001.010:
                      conformityType: NOT_EVALUATED
                    SD001.011:
                      conformityType: NOT_EVALUATED
                    SD001.012:
                      conformityType: NOT_EVALUATED
                    SD001.013:
                      conformityType: NOT_EVALUATED
                    SD001.014:
                      conformityType: NOT_EVALUATED
                    SD001.015:
                      conformityType: NOT_EVALUATED
                    SD001.016:
                      conformityType: NOT_EVALUATED
                    SD001.017:
                      conformityType: NOT_EVALUATED
                    SD002:
                      conformityType: NOT_EVALUATED
                    SD002.001:
                      conformityType: NOT_EVALUATED
                    SD002.002:
                      conformityType: NOT_EVALUATED
                    SD002.003:
                      conformityType: NOT_EVALUATED
                    SD003:
                      conformityType: NOT_EVALUATED
                    SD003.001:
                      conformityType: NOT_EVALUATED
                    SD003.002:
                      conformityType: NOT_EVALUATED
                    SD004:
                      conformityType: NOT_EVALUATED
                    SD004.001:
                      conformityType: NOT_EVALUATED
                    SD004.002:
                      conformityType: NOT_EVALUATED
                    SD004.003:
                      conformityType: NOT_EVALUATED
                    SD004.004:
                      conformityType: NOT_EVALUATED
                    SD005:
                      conformityType: NOT_EVALUATED
                    SD005.001:
                      conformityType: NOT_EVALUATED
                    SD005.002:
                      conformityType: NOT_EVALUATED
                    SD009:
                      conformityType: NOT_EVALUATED
                    SD009.001:
                      conformityType: NOT_EVALUATED
                    SD009.002:
                      conformityType: NOT_EVALUATED
                    SD009.003:
                      conformityType: NOT_EVALUATED
                    SD010:
                      conformityType: NOT_EVALUATED
                    SD011:
                      conformityType: NOT_EVALUATED
                    SD012:
                      conformityType: NOT_EVALUATED
                    SD013:
                      conformityType: NOT_EVALUATED
                    SD014:
                      conformityType: NOT_EVALUATED
                    DI001:
                      conformityType: NOT_EVALUATED
                    DI001.001:
                      conformityType: NOT_EVALUATED
                    DI001.002:
                      conformityType: NOT_EVALUATED
                    DI001.003:
                      conformityType: NOT_EVALUATED
                    LM001:
                      conformityType: NOT_EVALUATED
                    LM001.001:
                      conformityType: NOT_EVALUATED
                    LM001.002:
                      conformityType: NOT_EVALUATED
                    LM001.003:
                      conformityType: NOT_EVALUATED
                    LM001.004:
                      conformityType: NOT_EVALUATED
                    LM002:
                      conformityType: NOT_EVALUATED
                    LM002.001:
                      conformityType: NOT_EVALUATED
                    LM002.002:
                      conformityType: NOT_EVALUATED
                    LM002.003:
                      conformityType: NOT_EVALUATED
                    LM008:
                      conformityType: NOT_EVALUATED
                    DR001:
                      conformityType: NOT_EVALUATED
                    DR012:
                      conformityType: NOT_EVALUATED
                    SC001:
                      conformityType: NOT_EVALUATED
                    SC006:
                      conformityType: NOT_EVALUATED
                    SC007:
                      conformityType: NOT_EVALUATED
                    SC008:
                      conformityType: NOT_EVALUATED
                    SC009:
                      conformityType: NOT_EVALUATED
                    IS001:
                      conformityType: NOT_EVALUATED
                    IS003.001:
                      conformityType: NOT_EVALUATED
                    IS003.002:
                      conformityType: NOT_EVALUATED
                    IS003:
                      conformityType: NOT_EVALUATED
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiSpecificationVersionDeclarationOfConformity_CreateRead'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthenticatedError'
        '403':
          $ref: '#/components/responses/PermissionDeniedError'
        '422':
          $ref: '#/components/responses/InvalidArgumentError'
        '429':
          $ref: '#/components/responses/ResourceExhaustedError'
        '503':
          $ref: '#/components/responses/UnavailableError'
        5XX:
          $ref: '#/components/responses/InternalError'
  /api-specifications/{apiSpecificationId}/versions/{versionId}/declarations-of-conformity/{declarationOfConformityId}:
    get:
      summary: Get an API specification version declaration of conformity by ID
      description: |
        Returns a single API specification version declaration of conformity.
      operationId: getApiSpecificationVersionDeclarationOfConformityById
      tags:
        - api-specification.version.declarations-of-conformity
      parameters:
        - $ref: '#/components/parameters/apiSpecificationId'
        - $ref: '#/components/parameters/versionId'
        - $ref: '#/components/parameters/declarationOfConformityId'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiSpecificationVersionDeclarationOfConformity_CreateRead'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthenticatedError'
        '403':
          $ref: '#/components/responses/PermissionDeniedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '422':
          $ref: '#/components/responses/InvalidArgumentError'
        '429':
          $ref: '#/components/responses/ResourceExhaustedError'
        '503':
          $ref: '#/components/responses/UnavailableError'
        5XX:
          $ref: '#/components/responses/InternalError'
components:
  schemas:
    Country:
      type: string
      enum:
        - AD
        - AE
        - AF
        - AG
        - AI
        - AL
        - AM
        - AN
        - AO
        - AQ
        - AR
        - AS
        - AT
        - AU
        - AW
        - AX
        - AZ
        - BA
        - BB
        - BD
        - BE
        - BF
        - BG
        - BH
        - BI
        - BJ
        - BL
        - BM
        - BN
        - BO
        - BQ
        - BR
        - BS
        - BT
        - BV
        - BW
        - BY
        - BZ
        - CA
        - CC
        - CD
        - CF
        - CG
        - CH
        - CI
        - CK
        - CL
        - CM
        - CN
        - CO
        - CR
        - CU
        - CV
        - CW
        - CX
        - CY
        - CZ
        - DE
        - DJ
        - DK
        - DM
        - DO
        - DZ
        - EC
        - EE
        - EG
        - EH
        - ER
        - ES
        - ET
        - FI
        - FJ
        - FK
        - FM
        - FO
        - FR
        - GA
        - GB
        - GD
        - GE
        - GF
        - GG
        - GH
        - GI
        - GL
        - GM
        - GN
        - GP
        - GQ
        - GR
        - GS
        - GT
        - GU
        - GW
        - GY
        - HK
        - HM
        - HN
        - HR
        - HT
        - HU
        - ID
        - IE
        - IL
        - IM
        - IN
        - IO
        - IQ
        - IR
        - IS
        - IT
        - JE
        - JM
        - JO
        - JP
        - KE
        - KG
        - KH
        - KI
        - KM
        - KN
        - KP
        - KR
        - KW
        - KY
        - KZ
        - LA
        - LB
        - LC
        - LI
        - LK
        - LR
        - LS
        - LT
        - LU
        - LV
        - LY
        - MA
        - MC
        - MD
        - ME
        - MF
        - MG
        - MH
        - MK
        - ML
        - MM
        - MN
        - MO
        - MP
        - MQ
        - MR
        - MS
        - MT
        - MU
        - MV
        - MW
        - MX
        - MY
        - MZ
        - NA
        - NC
        - NE
        - NF
        - NG
        - NI
        - NL
        - 'NO'
        - NP
        - NR
        - NU
        - NZ
        - OM
        - PA
        - PE
        - PF
        - PG
        - PH
        - PK
        - PL
        - PM
        - PN
        - PR
        - PS
        - PT
        - PW
        - PY
        - QA
        - RE
        - RO
        - RS
        - RU
        - RW
        - SA
        - SB
        - SC
        - SD
        - SE
        - SG
        - SH
        - SI
        - SJ
        - SK
        - SL
        - SM
        - SN
        - SO
        - SR
        - SS
        - ST
        - SV
        - SX
        - SY
        - SZ
        - TC
        - TD
        - TF
        - TG
        - TH
        - TJ
        - TK
        - TL
        - TM
        - TN
        - TO
        - TR
        - TT
        - TV
        - TW
        - TZ
        - UA
        - UG
        - UM
        - US
        - UY
        - UZ
        - VA
        - VC
        - VE
        - VG
        - VI
        - VN
        - VU
        - WF
        - WS
        - XK
        - YE
        - YT
        - ZA
        - ZM
        - ZW
      description: |
        The country:

        - `AD` - Andorra
        - `AE` - United Arab Emirates
        - `AF` - Afghanistan
        - `AG` - Antigua and Barbuda
        - `AI` - Anguilla
        - `AL` - Albania
        - `AM` - Armenia
        - `AN` - Netherlands Antilles
        - `AO` - Angola
        - `AQ` - Antarctica
        - `AR` - Argentina
        - `AS` - American Samoa
        - `AT` - Austria
        - `AU` - Australia
        - `AW` - Aruba
        - `AX` - Åland Islands
        - `AZ` - Azerbaijan
        - `BA` - Bosnia and Herzegovina
        - `BB` - Barbados
        - `BD` - Bangladesh
        - `BE` - Belgium
        - `BF` - Burkina Faso
        - `BG` - Bulgaria
        - `BH` - Bahrain
        - `BI` - Burundi
        - `BJ` - Benin
        - `BL` - Saint Barthélemy
        - `BM` - Bermuda
        - `BN` - Brunei Darussalam
        - `BO` - Bolivia
        - `BQ` - Bonaire, Sint Eustatius and Saba
        - `BR` - Brazil
        - `BS` - Bahamas, The
        - `BT` - Bhutan
        - `BV` - Bouvet Island
        - `BW` - Botswana
        - `BY` - Belarus
        - `BZ` - Belize
        - `CA` - Canada
        - `CC` - Cocos (Keeling) Islands
        - `CD` - Congo, The Democratic Republic of the
        - `CF` - Central African Republic
        - `CG` - Congo
        - `CH` - Switzerland
        - `CI` - Côte d'Ivoire
        - `CK` - Cook Islands
        - `CL` - Chile
        - `CM` - Cameroon
        - `CN` - China
        - `CO` - Colombia
        - `CR` - Costa Rica
        - `CU` - Cuba
        - `CV` - Cape Verde
        - `CW` - Curaçao
        - `CX` - Christmas Island
        - `CY` - Cyprus
        - `CZ` - Czech Republic
        - `DE` - Germany
        - `DJ` - Djibouti
        - `DK` - Denmark
        - `DM` - Dominica
        - `DO` - Dominican Republic
        - `DZ` - Algeria
        - `EC` - Ecuador
        - `EE` - Estonia
        - `EG` - Egypt
        - `EH` - Western Sahara
        - `ER` - Eritrea
        - `ES` - Spain
        - `ET` - Ethiopia
        - `FI` - Finland
        - `FJ` - Fiji
        - `FK` - Falkland Islands (Malvinas)
        - `FM` - Micronesia, Federated States of
        - `FO` - Faroe Islands
        - `FR` - France
        - `GA` - Gabon
        - `GB` - United Kingdom
        - `GD` - Grenada
        - `GE` - Georgia
        - `GF` - French Guiana
        - `GG` - Guernsey
        - `GH` - Ghana
        - `GI` - Gibraltar
        - `GL` - Greenland
        - `GM` - Gambia, The
        - `GN` - Guinea
        - `GP` - Guadeloupe
        - `GQ` - Equatorial Guinea
        - `GR` - Greece
        - `GS` - South Georgia and the South Sandwich Islands
        - `GT` - Guatemala
        - `GU` - Guam
        - `GW` - Guinea-Bissau
        - `GY` - Guyana
        - `HK` - Hong Kong
        - `HM` - Heard Island and McDonald Islands
        - `HN` - Honduras
        - `HR` - Croatia
        - `HT` - Haiti
        - `HU` - Hungary
        - `ID` - Indonesia
        - `IE` - Ireland
        - `IL` - Israel
        - `IM` - Isle of Man
        - `IN` - India
        - `IO` - British Indian Ocean Territory
        - `IQ` - Iraq
        - `IR` - Iran, Islamic Republic of
        - `IS` - Iceland
        - `IT` - Italy
        - `JE` - Jersey
        - `JM` - Jamaica
        - `JO` - Jordan
        - `JP` - Japan
        - `KE` - Kenya
        - `KG` - Kyrgyzstan
        - `KH` - Cambodia
        - `KI` - Kiribati
        - `KM` - Comoros
        - `KN` - Saint Kitts and Nevis
        - `KP` - Korea, Democratic People's Republic of
        - `KR` - Korea, Republic of
        - `KW` - Kuwait
        - `KY` - Cayman Islands
        - `KZ` - Kazakhstan
        - `LA` - Lao People's Democratic Republic
        - `LB` - Lebanon
        - `LC` - Saint Lucia
        - `LI` - Liechtenstein
        - `LK` - Sri Lanka
        - `LR` - Liberia
        - `LS` - Lesotho
        - `LT` - Lithuania
        - `LU` - Luxembourg
        - `LV` - Latvia
        - `LY` - Libya
        - `MA` - Morocco
        - `MC` - Monaco
        - `MD` - Moldova, Republic of
        - `ME` - Montenegro
        - `MF` - Saint Martin
        - `MG` - Madagascar
        - `MH` - Marshall Islands
        - `MK` - North Macedonia
        - `ML` - Mali
        - `MM` - Myanmar
        - `MN` - Mongolia
        - `MO` - Macao
        - `MP` - Northern Mariana Islands
        - `MQ` - Martinique
        - `MR` - Mauritania
        - `MS` - Montserrat
        - `MT` - Malta
        - `MU` - Mauritius
        - `MV` - Maldives
        - `MW` - Malawi
        - `MX` - Mexico
        - `MY` - Malaysia
        - `MZ` - Mozambique
        - `NA` - Namibia
        - `NC` - New Caledonia
        - `NE` - Niger
        - `NF` - Norfolk Island
        - `NG` - Nigeria
        - `NI` - Nicaragua
        - `NL` - Netherlands
        - `NO` - Norway
        - `NP` - Nepal
        - `NR` - Nauru
        - `NU` - Niue
        - `NZ` - New Zealand
        - `OM` - Oman
        - `PA` - Panama
        - `PE` - Peru
        - `PF` - French Polynesia
        - `PG` - Papua New Guinea
        - `PH` - Philippines
        - `PK` - Pakistan
        - `PL` - Poland
        - `PM` - Saint Pierre and Miquelon
        - `PN` - Pitcairn
        - `PR` - Puerto Rico
        - `PS` - Palestinian Territories
        - `PT` - Portugal
        - `PW` - Palau
        - `PY` - Paraguay
        - `QA` - Qatar
        - `RE` - Réunion
        - `RO` - Romania
        - `RS` - Serbia
        - `RU` - Russian Federation
        - `RW` - Rwanda
        - `SA` - Saudi Arabia
        - `SB` - Solomon Islands
        - `SC` - Seychelles
        - `SD` - Sudan
        - `SE` - Sweden
        - `SG` - Singapore
        - `SH` - Saint Helena, Ascension and Tristan da Cunha
        - `SI` - Slovenia
        - `SJ` - Svalbard and Jan Mayen
        - `SK` - Slovakia
        - `SL` - Sierra Leone
        - `SM` - San Marino
        - `SN` - Senegal
        - `SO` - Somalia
        - `SR` - Suriname
        - `SS` - South Sudan
        - `ST` - Sao Tome and Principe
        - `SV` - El Salvador
        - `SX` - Sint Maarten
        - `SY` - Syrian Arab Republic
        - `SZ` - Eswatini
        - `TC` - Turks and Caicos Islands
        - `TD` - Chad
        - `TF` - French Southern Territories
        - `TG` - Togo
        - `TH` - Thailand
        - `TJ` - Tajikistan
        - `TK` - Tokelau
        - `TL` - Timor-Leste
        - `TM` - Turkmenistan
        - `TN` - Tunisia
        - `TO` - Tonga
        - `TR` - Turkey
        - `TT` - Trinidad and Tobago
        - `TV` - Tuvalu
        - `TW` - Taiwan
        - `TZ` - Tanzania, United Republic of
        - `UA` - Ukraine
        - `UG` - Uganda
        - `UM` - United States Minor Outlying Islands
        - `US` - United States
        - `UY` - Uruguay
        - `UZ` - Uzbekistan
        - `VA` - Holy See
        - `VC` - Saint Vincent and the Grenadines
        - `VE` - Venezuela
        - `VG` - Virgin Islands, British
        - `VI` - Virgin Islands, U.S.
        - `VN` - Vietnam
        - `VU` - Vanuatu
        - `WF` - Wallis and Futuna
        - `WS` - Samoa
        - `XK` - Kosovo
        - `YE` - Yemen
        - `YT` - Mayotte
        - `ZA` - South Africa
        - `ZM` - Zambia
        - `ZW` - Zimbabwe
      examples:
        - NL
    Address:
      description: The address information
      type:
        - object
        - 'null'
      properties:
        street:
          description: The street name
          type:
            - string
            - 'null'
          maxLength: 255
          examples:
            - Oude Middenweg
        houseNumber:
          description: The house number
          type:
            - integer
            - 'null'
          format: int32
          minimum: 0
          examples:
            - 55
        houseNumberAddition:
          description: The house number addition
          type:
            - string
            - 'null'
          maxLength: 100
          examples:
            - A
        addressLine2:
          description: |
            Address line 2 is for the apartment, suite, room, floor, building, unit, department, or any other designation not
            part of the physical address
          type:
            - string
            - 'null'
          maxLength: 255
          examples:
            - Office building Palazzo Giardino
        postalCode:
          description: The postal code
          type:
            - string
            - 'null'
          maxLength: 10
          examples:
            - 2491 AC
        city:
          description: The city
          type:
            - string
            - 'null'
          maxLength: 255
          examples:
            - The Hague
        stateOrRegion:
          description: The state, region or province
          type:
            - string
            - 'null'
          maxLength: 255
          examples:
            - South Holland
        country:
          $ref: '#/components/schemas/Country'
    Organization:
      description: The organization information
      type: object
      required:
        - name
        - emailAddress
        - id
      properties:
        id:
          description: The ID of the organization
          type: string
          format: uuid
          readOnly: true
          examples:
            - b9b95cd7-8d6e-4c91-8861-854828cf1730
        name:
          description: The name of the organization
          type: string
          maxLength: 255
          examples:
            - Nictiz
        description:
          description: The description of the organization
          type:
            - string
            - 'null'
          maxLength: 1000
          examples:
            - Nictiz is the Dutch competence center for electronic exchange of health and care information.
        website:
          description: The website URL of the organization
          type:
            - string
            - 'null'
          maxLength: 1000
          examples:
            - https://nictiz.nl/
        emailAddress:
          description: The email address of the organization
          type: string
          format: email
          maxLength: 254
          examples:
            - info@nictiz.nl
        phoneNumber:
          description: The phone number of the organization
          type:
            - string
            - 'null'
          maxLength: 50
          examples:
            - +31 (0)70 317 3450
        address:
          $ref: '#/components/schemas/Address'
    BasicUser:
      description: The basic user information
      type: object
      required:
        - name
        - id
      properties:
        id:
          description: The ID of the user
          type: string
          format: uuid
          readOnly: true
          examples:
            - 533d3fe3-bccc-405a-9904-4f516e892856
        name:
          description: The name of the user
          type: string
          maxLength: 255
          examples:
            - Bot
    BasicResponse:
      type: object
      required:
        - createTime
        - createdByUserId
        - updateTime
        - updatedByUserId
      properties:
        createTime:
          description: The date and time at which the item was created
          type: string
          format: date-time
          readOnly: true
          examples:
            - '2023-10-24T14:15:30.500Z'
        createdByUserId:
          description: The ID of the user that created the item
          type: string
          format: uuid
          readOnly: true
          examples:
            - 533d3fe3-bccc-405a-9904-4f516e892856
        createdByUser:
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/BasicUser'
        updateTime:
          description: The date and time at which the item was last updated
          type: string
          format: date-time
          readOnly: true
          examples:
            - '2023-10-25T10:45:30.500Z'
        updatedByUserId:
          description: The ID of the user that last updated the item
          type: string
          format: uuid
          readOnly: true
          examples:
            - 533d3fe3-bccc-405a-9904-4f516e892856
        updatedByUser:
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/BasicUser'
    Organization_CreateRead:
      allOf:
        - $ref: '#/components/schemas/Organization'
        - $ref: '#/components/schemas/BasicResponse'
    ApiErrorType:
      type: string
      enum:
        - ALREADY_EXISTS
        - FAILED_PRECONDITION
        - INTERNAL
        - INVALID_ARGUMENT
        - NOT_FOUND
        - PERMISSION_DENIED
        - RESOURCE_EXHAUSTED
        - UNAUTHENTICATED
        - UNAVAILABLE
      description: |
        Error type:

        - `ALREADY_EXISTS` - Already exists
        - `FAILED_PRECONDITION` - Failed precondition
        - `INTERNAL` - Internal
        - `INVALID_ARGUMENT` - Invalid argument
        - `NOT_FOUND` - Not found
        - `PERMISSION_DENIED` - Permission denied
        - `RESOURCE_EXHAUSTED` - Resource exhausted
        - `UNAUTHENTICATED` - Unauthenticated
        - `UNAVAILABLE` - Unavailable
      examples:
        - INVALID_ARGUMENT
    ApiErrorDetails:
      type: object
      required:
        - location
        - message
      properties:
        location:
          description: |
            The specific item that caused the error. For example, if you specify an invalid value for a parameter, the 
            `location` will be the name of the parameter.
          type: string
          examples:
            - propertyName
        message:
          type: string
          examples:
            - Message describing the error
    ApiError:
      type: object
      required:
        - status
        - type
        - message
      properties:
        status:
          type: integer
          format: int32
          examples:
            - 400
        type:
          $ref: '#/components/schemas/ApiErrorType'
        message:
          type: string
          examples:
            - Message describing the error
        details:
          type:
            - array
            - 'null'
          items:
            $ref: '#/components/schemas/ApiErrorDetails'
    Organization_Update:
      allOf:
        - $ref: '#/components/schemas/Organization'
    SemVer:
      description: The Semantic Versioning Specification (SemVer) version information
      type: object
      required:
        - major
        - minor
        - patch
      properties:
        major:
          description: The major version
          type: integer
          format: int32
          minimum: 0
          examples:
            - 1
        minor:
          description: The minor version
          type: integer
          format: int32
          minimum: 0
          examples:
            - 0
        patch:
          description: The patch version
          type: integer
          format: int32
          minimum: 0
          examples:
            - 0
        preRelease:
          description: The pre-release label
          type: string
          maxLength: 255
          examples:
            - beta
        build:
          description: The build metadata label
          type: string
          maxLength: 255
          examples:
            - exp.sha.5114f85
    ProductLifecycleState:
      type: string
      enum:
        - DRAFT
        - PUBLISHED
        - DEPRECATED
        - RETIRED
      description: |
        The product lifecycle state:

        - `DRAFT` - The product is being prepared, or is incomplete.
        - `PUBLISHED` - The product is ready to be used.
        - `DEPRECATED` - The old version of the product is DEPRECATED when a newer version of the product is PUBLISHED.
        - `RETIRED` - The product is no longer in use and has been moved to the RETIRED state.
      examples:
        - PUBLISHED
    ApiRequirementsVersion:
      description: The API requirements version information
      type: object
      required:
        - name
        - description
        - url
        - publishTime
        - lifecycleState
        - semVer
        - id
      properties:
        id:
          description: The ID of the API requirements version
          type: string
          format: uuid
          readOnly: true
          examples:
            - 29c4913a-5ca1-4e91-8353-48866eb6093e
        name:
          description: The name of the API requirements version
          type: string
          maxLength: 255
          examples:
            - 1.2.0
        description:
          description: The description of the API requirements version
          type:
            - string
            - 'null'
          maxLength: 1000
          examples:
            - This specification sets out requirements for Application Programming Interfaces (APIs) in Dutch Healthcare. It has been developed as part of the Nictiz API strategy.
        url:
          description: The URL of the API requirements version documentation
          type: string
          maxLength: 1000
          examples:
            - https://nictiz.github.io/api-requirements-docs/v1.2.0/
        publishTime:
          description: The date and time at which the API requirements version was published
          type: string
          format: date-time
          examples:
            - '2023-07-12T10:45:30.500Z'
        semVer:
          allOf:
            - $ref: '#/components/schemas/SemVer'
          examples:
            - major: 1
              minor: 2
              patch: 0
        lifecycleState:
          description: The lifecycle state of the API requirements version
          allOf:
            - $ref: '#/components/schemas/ProductLifecycleState'
          examples:
            - PUBLISHED
    RequirementLevel:
      type: string
      enum:
        - MUST
        - MUST_NOT
        - SHOULD
        - SHOULD_NOT
        - MAY
      description: |
        Key words to indicate requirement levels, to be interpreted as described in
        [RFC 2119](https://datatracker.ietf.org/doc/html/rfc2119):

        -`MUST` - This word, or the terms "REQUIRED" or "SHALL", mean that the definition is an absolute requirement of the
          specification.
        -`MUST_NOT` - This phrase, or the phrase "SHALL NOT", mean that the definition is an absolute prohibition of the
          specification.
        -`SHOULD` - This word, or the adjective "RECOMMENDED", mean that there may exist valid reasons in particular
          circumstances to ignore a particular item, but the full implications must be understood and carefully weighed before
          choosing a different course.
        -`SHOULD_NOT` - This phrase, or the phrase "NOT RECOMMENDED" mean that there may exist valid reasons in particular
          circumstances when the particular behavior is acceptable or even useful, but the full implications should be
          understood and the case carefully weighed before implementing any behavior described with this label.
        -`MAY` - This word, or the adjective "OPTIONAL", mean that an item is truly optional.
      examples:
        - MUST
    ApiRequirementCategory:
      type: string
      enum:
        - API_SPECIFICATION_AND_DOCUMENTATION
        - API_TESTABILITY
        - API_DISCOVERABILITY
        - API_ONBOARDING
        - API_LIFECYCLE_MANAGEMENT_AND_VERSIONING
        - API_AGREEMENTS
        - API_DESIGN_RULES
        - API_SECURITY
        - HEALTH_INFORMATION_STANDARDS_COMPLIANCE
      description: |
        The API requirement category:

        - `API_SPECIFICATION_AND_DOCUMENTATION` - API specification and documentation
        - `API_TESTABILITY` - API testability
        - `API_DISCOVERABILITY` - API discoverability
        - `API_ONBOARDING` - API onboarding
        - `API_LIFECYCLE_MANAGEMENT_AND_VERSIONING` - API lifecycle management and versioning
        - `API_AGREEMENTS` - API agreements
        - `API_DESIGN_RULES` - API Design Rules
        - `API_SECURITY` - API security
        - `HEALTH_INFORMATION_STANDARDS_COMPLIANCE` - Health Information Standards compliance
      examples:
        - API_SPECIFICATION_AND_DOCUMENTATION
    ApiRole:
      type: string
      enum:
        - API_CLIENT_DEPLOYER
        - API_CLIENT_DEVELOPER
        - API_INFRASTRUCTURE
        - API_LOGICAL_DESIGNER
        - API_PROVIDER
        - API_SERVER_DEPLOYER
        - API_SERVER_DEVELOPER
        - API_SPECIFIER
        - API_USER
      description: |
        The roles involved with the development, exploitation and use of APIs:

        - `API_CLIENT_DEPLOYER` - Technical responsibilities for employing an API, as deployed by the API server deployer,
          and specified by the API specifier, thus implementing the final responsibilities of the API user.
        - `API_CLIENT_DEVELOPER` - Technical responsibilities for supplying software for the API client deployer.
        - `API_INFRASTRUCTURE` - Technical responsibilities for conveying specified APIs between API clients and API servers.
        - `API_LOGICAL_DESIGNER` - Responsibilities for logically specifying both data and the operations to be implemented
          in the API.
        - `API_PROVIDER` - End responsibilities for providing the value and meaning of an API, as agreed with API users.
        - `API_SERVER_DEPLOYER` - Technical responsibilities for deploying an API, as specified by an API specifier, thus
          implementing the end responsibilities of the API provider.
        - `API_SERVER_DEVELOPER` - Technical responsibilities for supplying software for the API server deployer.
        - `API_SPECIFIER` - Responsibilities for technically specifying the API so that an API server deployer knows what to
          deploy and an API client knows what to employ.
        - `API_USER` - End responsibilities for using the value and meaning of an API, as agreed with the API provider.
      examples:
        - API_SPECIFIER
    ApiPerspectiveType:
      type: string
      enum:
        - API_SPECIFICATION
        - API_SERVER_IMPLEMENTATION
        - API_SERVER_DEPLOYMENT
        - API_CLIENT_IMPLEMENTATION
        - API_CLIENT_DEPLOYMENT
        - API_AGREEMENT
      description: |
        Due to the different perspectives on what an API is, this specification differentiates between:

        - `API_SPECIFICATION` - An API specification is a formal specification of the API.
        - `API_SERVER_IMPLEMENTATION` - An API server implementation is the server-side software code that implements the
          API specification.
        - `API_SERVER_DEPLOYMENT` - An API server deployment is an instance of the server-side software; the actual service
          deployed by an organization to provide value for its clients.
        - `API_CLIENT_IMPLEMENTATION` - An API client implementation is the client-side software code that implements the
          API specification.
        - `API_CLIENT_DEPLOYMENT` - An API client deployment is an instance of the client-side software.
        - `API_AGREEMENT` - An API agreement is a legal agreement typically between a software provider and a client that
          outlines the terms of use for an API.
      examples:
        - API_SPECIFICATION
    ApiArchitecturalStyle:
      type: string
      enum:
        - REST
        - SOAP
        - GRAPHQL
        - ODATA
        - GRPC
        - OTHER
      description: |
        The API architectural style:

        - `REST` - REST architectural style.
        - `SOAP` - SOAP architectural style.
        - `GRAPHQL` - GraphQL architectural style.
        - `ODATA` - OData architectural style.
        - `GRPC` - gRPC architectural style.
        - `OTHER` - Other architectural style.
      examples:
        - REST
    ApiStandardizationLevel:
      type: string
      enum:
        - OPEN_API
        - TECHNICALLY_STANDARDIZED_API
        - FULLY_STANDARDIZED_API
      description: |
        The levels of API standardization:

        - `OPEN_API` - Requirements at this level aim to increase reusability, discoverability and quality, without
          restricting APIs to specific technical and/or semantical standards.
        - `TECHNICALLY_STANDARDIZED_API` - Requirements at this level aim to increase the technical harmonization of APIs.
        - `FULLY_STANDARDIZED_API` - Requirements at this level aim to increase software interoperability by setting
          requirements for standardizing all parts of APIs.
      examples:
        - OPEN_API
    ApiRequirement:
      description: The API requirement information
      type: object
      required:
        - code
        - description
        - url
        - requirementLevel
        - score
        - category
        - roles
        - perspectiveTypes
        - architecturalStyles
        - standardizationLevels
        - id
      properties:
        id:
          description: The ID of the API requirement
          type: string
          format: uuid
          readOnly: true
          examples:
            - 516033cb-06a4-4312-8874-dfbed689760f
        code:
          description: The code of the API requirement
          type: string
          maxLength: 50
          examples:
            - SD001
        description:
          description: The description of the API requirement
          type: string
          maxLength: 1000
          examples:
            - API documentation MUST be publicly and freely available
        explanation:
          description: The explanation of the API requirement
          type:
            - string
            - 'null'
          maxLength: 1000
          examples:
            - This is an example text.
        url:
          description: The URL of the API requirement documentation
          type: string
          maxLength: 1000
          examples:
            - https://nictiz.github.io/api-requirements-docs/v1.2.0/api-specification-and-documentation/#sd001-api-documentation-must-be-publicly-and-freely-available
        requirementLevel:
          allOf:
            - $ref: '#/components/schemas/RequirementLevel'
          examples:
            - MUST
        score:
          description: The score of the API requirement
          type: integer
          format: int32
          minimum: 0
          examples:
            - 1
        category:
          description: The category that applies to the API requirement
          allOf:
            - $ref: '#/components/schemas/ApiRequirementCategory'
          examples:
            - API_SPECIFICATION_AND_DOCUMENTATION
        roles:
          description: The roles that apply to the API requirement
          type: array
          items:
            $ref: '#/components/schemas/ApiRole'
          examples:
            - - API_SPECIFIER
        perspectiveTypes:
          description: The perspective types that apply to the API requirement
          type: array
          items:
            $ref: '#/components/schemas/ApiPerspectiveType'
          examples:
            - - API_SPECIFICATION
        architecturalStyles:
          description: The architectural styles that apply to the API requirement
          type: array
          items:
            $ref: '#/components/schemas/ApiArchitecturalStyle'
          examples:
            - - REST
              - SOAP
              - GRAPHQL
              - ODATA
              - GRPC
              - OTHER
        standardizationLevels:
          description: The standardization levels that apply to the API requirement
          type: array
          items:
            $ref: '#/components/schemas/ApiStandardizationLevel'
          examples:
            - - OPEN_API
              - TECHNICALLY_STANDARDIZED_API
              - FULLY_STANDARDIZED_API
    ApiRequirementsVersion_CreateRead:
      allOf:
        - $ref: '#/components/schemas/ApiRequirementsVersion'
        - type: object
          required:
            - apiRequirements
          properties:
            apiRequirements:
              type: array
              writeOnly: true
              items:
                $ref: '#/components/schemas/ApiRequirement'
        - $ref: '#/components/schemas/BasicResponse'
    ApiRequirementsVersion_Update:
      allOf:
        - $ref: '#/components/schemas/ApiRequirementsVersion'
    ApiRequirement_CreateRead:
      allOf:
        - $ref: '#/components/schemas/ApiRequirement'
        - $ref: '#/components/schemas/BasicResponse'
    ApiSpecification:
      description: The API specification information
      type: object
      required:
        - name
        - id
      properties:
        id:
          description: The ID of the API specification
          type: string
          format: uuid
          readOnly: true
          examples:
            - fe30bf05-de07-4556-9b17-1f82d62fe45f
        name:
          description: The name of the API specification
          type: string
          maxLength: 255
          examples:
            - Verzamelen Huisartsgegevens
        description:
          description: The description of the API specification
          type:
            - string
            - 'null'
          maxLength: 1000
          examples:
            - 'Het verzamelen van huisartsgegevens: je medische dossier bij je huisarts.'
    BasicOrganization:
      description: The basic organization information
      type: object
      required:
        - name
        - id
      properties:
        id:
          description: The ID of the organization
          type: string
          format: uuid
          readOnly: true
          examples:
            - b9b95cd7-8d6e-4c91-8861-854828cf1730
        name:
          description: The name of the organization
          type: string
          maxLength: 255
          examples:
            - Nictiz
    ApiLifecycleState:
      type: string
      enum:
        - CREATED
        - PROTOTYPED
        - PUBLISHED
        - BLOCKED
        - DEPRECATED
        - RETIRED
      description: |
        The API lifecycle state:

        - `CREATED` - The API is created but is not ready for consumption.
        - `PROTOTYPED` - An API prototype is created for early promotion and consumer testing.
        - `PUBLISHED` - The API is ready to be used.
        - `BLOCKED` - The API is temporarily blocked from being used.
        - `DEPRECATED` - The old version of the API is DEPRECATED when a newer version of the API is PUBLISHED.
        - `RETIRED` - The API is no longer in use and has been moved to the RETIRED state.
      examples:
        - PUBLISHED
    ApiSpecificationVersion:
      description: The API specification version information
      type: object
      required:
        - name
        - publishTime
        - semVer
        - lifecycleState
        - id
      properties:
        id:
          description: The ID of the API specification version
          type: string
          format: uuid
          readOnly: true
          examples:
            - 15261fd0-b292-45d9-b6b1-266cc922fb50
        name:
          description: The name of the API specification version
          type: string
          maxLength: 255
          examples:
            - '2.0'
        description:
          description: The description of the API specification version
          type:
            - string
            - 'null'
          maxLength: 1000
          examples:
            - Verzamelen Huisartsgegevens 2.0
        publishTime:
          description: The date and time at which the API specification version was published
          type: string
          format: date-time
          examples:
            - '2020-09-02T00:00:00.000Z'
        semVer:
          allOf:
            - $ref: '#/components/schemas/SemVer'
          examples:
            - major: 2
              minor: 0
              patch: 0
        lifecycleState:
          description: The lifecycle state of the API specification version
          allOf:
            - $ref: '#/components/schemas/ApiLifecycleState'
          examples:
            - PUBLISHED
    ApiSpecificationVersionUrlType:
      type: string
      enum:
        - FUNCTIONAL_DESIGN
        - TECHNICAL_DESIGN
        - OPENAPI_SPECIFICATION
        - OTHER
      description: |
        The API specification version URL type:

        - `FUNCTIONAL_DESIGN` - Functional design.
        - `TECHNICAL_DESIGN` - Technical design.
        - `OPENAPI_SPECIFICATION` - OpenAPI Specification (OAS).
        - `OTHER` - Other.
      examples:
        - OPENAPI_SPECIFICATION
    ApiSpecificationVersionUrl:
      description: The API specification version URL information
      type: object
      required:
        - type
        - url
        - id
      properties:
        id:
          description: The ID of the API specification version URL
          type: string
          format: uuid
          readOnly: true
          examples:
            - 37bfbf71-570c-45c1-9fbf-7e5f63db61b8
        type:
          description: The API specification version URL type
          allOf:
            - $ref: '#/components/schemas/ApiSpecificationVersionUrlType'
          examples:
            - FUNCTIONAL_DESIGN
        url:
          description: The API specification version URL
          type: string
          maxLength: 1000
          examples:
            - https://informatiestandaarden.nictiz.nl/wiki/MedMij:V2020.01/OntwerpHuisartsgegevens
    BasicApiSpecificationVersionUrl:
      allOf:
        - $ref: '#/components/schemas/ApiSpecificationVersionUrl'
        - description: The basic API specification version URL information
    ApiRankingLevel:
      type: string
      enum:
        - NONE
        - OPEN_API
        - TECHNICALLY_STANDARDIZED_API
        - FULLY_STANDARDIZED_API
      description: |
        The API ranking level:

        - `NONE` - None.
        - `OPEN_API` - Open API.
        - `TECHNICALLY_STANDARDIZED_API` - Technically standardized API.
        - `FULLY_STANDARDIZED_API` - Fully standardized API.
      examples:
        - OPEN_API
    ApiRanking:
      description: The API ranking information
      type: object
      required:
        - score
        - maximumScore
      properties:
        score:
          description: The API ranking score
          type: integer
          format: int32
          minimum: 0
          examples:
            - 27
        maximumScore:
          description: The API ranking maximum score
          type: integer
          format: int32
          minimum: 0
          examples:
            - 31
    ApiSpecificationVersionDeclarationOfConformity:
      description: The API specification version declaration of conformity information
      type: object
      required:
        - requirementsVersion
        - id
        - rankingLevel
        - rankings
      properties:
        id:
          description: The ID of the API specification version declaration of conformity
          type: string
          format: uuid
          readOnly: true
          examples:
            - 188c9c2c-ea9e-48fa-8423-5e8e2f60161c
        requirementsVersion:
          description: The name of the API requirements version
          type: string
          maxLength: 255
          examples:
            - 1.2.0
        rankingLevel:
          description: The API specification version ranking level
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/ApiRankingLevel'
          examples:
            - OPEN_API
        rankings:
          description: |
            A string-to-object map where keys are strings of `ApiRankingType` and values are objects of `ApiRanking`
          readOnly: true
          type: object
          additionalProperties:
            $ref: '#/components/schemas/ApiRanking'
          examples:
            - OPEN_API:
                score: 27
                maximumScore: 31
              TECHNICALLY_STANDARDIZED_API:
                score: 6
                maximumScore: 11
              FULLY_STANDARDIZED_API:
                score: 2
                maximumScore: 6
    BasicApiSpecificationVersionDeclarationOfConformity:
      allOf:
        - $ref: '#/components/schemas/ApiSpecificationVersionDeclarationOfConformity'
        - description: The basic API specification version declaration of conformity information
    BasicApiSpecificationVersion:
      allOf:
        - $ref: '#/components/schemas/ApiSpecificationVersion'
        - description: The basic API specification version information
          type: object
          required:
            - urls
            - lastDeclarationOfConformity
          properties:
            urls:
              type: array
              items:
                $ref: '#/components/schemas/BasicApiSpecificationVersionUrl'
            lastDeclarationOfConformity:
              readOnly: true
              allOf:
                - $ref: '#/components/schemas/BasicApiSpecificationVersionDeclarationOfConformity'
    ApiSpecification_Read:
      allOf:
        - $ref: '#/components/schemas/ApiSpecification'
        - type: object
          required:
            - organizationId
            - architecturalStyle
          properties:
            organizationId:
              description: The ID of the organization that maintains the API specification
              type: string
              format: uuid
              examples:
                - 4a7c2c17-6514-46f8-aa05-6a22fb18b4ad
            organization:
              readOnly: true
              allOf:
                - $ref: '#/components/schemas/BasicOrganization'
              examples:
                - id: 4a7c2c17-6514-46f8-aa05-6a22fb18b4ad
                  name: Stichting MedMij
            architecturalStyle:
              description: The architectural style of the API specification
              allOf:
                - $ref: '#/components/schemas/ApiArchitecturalStyle'
              examples:
                - REST
            mainVersionId:
              description: The ID of the main version of the API specification
              type:
                - string
                - 'null'
              format: uuid
              examples:
                - 15261fd0-b292-45d9-b6b1-266cc922fb50
            mainVersion:
              readOnly: true
              allOf:
                - $ref: '#/components/schemas/BasicApiSpecificationVersion'
        - $ref: '#/components/schemas/BasicResponse'
    ApiSpecification_Create:
      allOf:
        - $ref: '#/components/schemas/ApiSpecification'
        - type: object
          required:
            - organizationId
            - architecturalStyle
          properties:
            organizationId:
              description: The ID of the organization that maintains the API specification
              type: string
              format: uuid
              examples:
                - 4a7c2c17-6514-46f8-aa05-6a22fb18b4ad
            organization:
              readOnly: true
              allOf:
                - $ref: '#/components/schemas/BasicOrganization'
              examples:
                - id: 4a7c2c17-6514-46f8-aa05-6a22fb18b4ad
                  name: Stichting MedMij
            architecturalStyle:
              description: The architectural style of the API specification
              allOf:
                - $ref: '#/components/schemas/ApiArchitecturalStyle'
              examples:
                - REST
        - $ref: '#/components/schemas/BasicResponse'
    ApiSpecification_Update:
      allOf:
        - $ref: '#/components/schemas/ApiSpecification'
        - type: object
          properties:
            mainVersionId:
              description: The ID of the main version of the API specification
              type:
                - string
                - 'null'
              format: uuid
              examples:
                - 15261fd0-b292-45d9-b6b1-266cc922fb50
    ApiSpecificationVersion_CreateRead:
      allOf:
        - $ref: '#/components/schemas/ApiSpecificationVersion'
        - type: object
          required:
            - urls
            - lastDeclarationOfConformity
          properties:
            urls:
              type: array
              items:
                $ref: '#/components/schemas/BasicApiSpecificationVersionUrl'
            lastDeclarationOfConformity:
              readOnly: true
              allOf:
                - $ref: '#/components/schemas/BasicApiSpecificationVersionDeclarationOfConformity'
        - $ref: '#/components/schemas/BasicResponse'
    ApiSpecificationVersion_Update:
      allOf:
        - $ref: '#/components/schemas/ApiSpecificationVersion'
    ApiSpecificationVersionUrl_CreateRead:
      allOf:
        - $ref: '#/components/schemas/ApiSpecificationVersionUrl'
        - $ref: '#/components/schemas/BasicResponse'
    ApiSpecificationVersionUrl_Update:
      allOf:
        - $ref: '#/components/schemas/ApiSpecificationVersionUrl'
    ConformityType:
      type: string
      enum:
        - CONFORMANT
        - NOT_CONFORMANT
        - NOT_EVALUATED
      description: |
        The conformity type:

        - `CONFORMANT` - Conformity evaluation has passed, the resource is conformant.
        - `NOT_CONFORMANT` - Conformity evaluation has not passed, the resource is not conformant.
        - `NOT_EVALUATED` - Conformity has not been evaluated.
      examples:
        - CONFORMANT
    ApiRequirementConformity:
      description: The API requirement conformity information
      type: object
      required:
        - conformityType
      properties:
        conformityType:
          description: The API requirement conformity type
          allOf:
            - $ref: '#/components/schemas/ConformityType'
          examples:
            - CONFORMANT
        remarks:
          description: The API requirement conformity remarks
          type:
            - string
            - 'null'
          maxLength: 1000
          examples:
            - This is an example text.
    ApiSpecificationVersionDeclarationOfConformity_CreateRead:
      allOf:
        - $ref: '#/components/schemas/ApiSpecificationVersionDeclarationOfConformity'
        - type: object
          required:
            - requirements
          properties:
            requirements:
              description: |
                A string-to-object map where keys are API requirement codes and values are objects of
                `ApiRequirementConformity`
              type: object
              additionalProperties:
                $ref: '#/components/schemas/ApiRequirementConformity'
              examples:
                - SD001:
                    conformityType: CONFORMANT
                    remarks: This is an example text.
                  SD001.001:
                    conformityType: CONFORMANT
        - $ref: '#/components/schemas/BasicResponse'
    ApiRankingType:
      type: string
      enum:
        - OPEN_API
        - TECHNICALLY_STANDARDIZED_API
        - FULLY_STANDARDIZED_API
      description: |
        The API ranking type:

        - `OPEN_API` - Open API.
        - `TECHNICALLY_STANDARDIZED_API` - Technically standardized API.
        - `FULLY_STANDARDIZED_API` - Fully standardized API.
      examples:
        - OPEN_API
  parameters:
    limit:
      name: limit
      in: query
      description: |-
        The `limit` query string parameter restricts the number of items to return at one time.

        <details>
        <summary>Details</summary>

        - Minimum is `0`
        - Maximum is `100`

        </details>
      required: false
      schema:
        type: integer
        format: int32
        minimum: 1
        maximum: 100
        default: 100
        examples:
          - 100
    skip:
      name: skip
      in: query
      description: |-
        The `skip` query string parameter defines the number of items to skip before returning items.

        <details>
        <summary>Details</summary>

        - Minimum is `0`

        </details>
      required: false
      schema:
        type: integer
        format: int32
        minimum: 0
        default: 0
        examples:
          - 0
    sort:
      name: sort
      in: query
      description: |-
        The `sort` query string parameter sorts the data returned from your request.

        <details>
        <summary>Details</summary>

        ## Sort syntax

        A single sort expression uses the form:

        ```
        direction(field)
        ```

        In this syntax:

        - *direction* - The sort direction to use
        - *field* - The name of the field to sort by
            - Nested fields can be referenced using dot notation (`field.nested`) or bracket notation (`field["nested"]`)

        ## Sort directions

        - `asc` - Ascending (smallest to largest)
            - *e.g. 1 to 100, A to Z, oldest to newest, false to true, not null to null*
        - `desc` - Descending (largest to smallest)
            - *e.g. 100 to 1, Z to A, newest to oldest, true to false, null to not null*

        ## Functions

        Sort functionality can be expanded using functions. These functions help to sort specific data types. For example,
        they allow to sort on the `year` component of a `date-time` type field.

        Functions can be applied to the `field` component of a sort expression, like so:

        ```
        direction(function(field))
        ```

        ### Sort functions

        | Function      | Description                                            | Input type  | Output type | Example input                             | Example output |
        |---------------|--------------------------------------------------------|-------------|-------------|-------------------------------------------|----------------|
        | `year`        | Returns the year component of a date value             | `date-time` | `integer`   | `year("2024-03-16T14:15:30.500Z")`        | `2024`         |
        | `month`       | Returns the month component of a date value            | `date-time` | `integer`   | `month("2024-03-16T14:15:30.500Z")`       | `3`            |
        | `day`         | Returns the day of the month component of a date value | `date-time` | `integer`   | `day("2024-03-16T14:15:30.500Z")`         | `16`           |
        | `hour`        | Returns the hour component of a datetime value         | `date-time` | `integer`   | `hour("2024-03-16T14:15:30.500Z")`        | `14`           |
        | `minute`      | Returns the minute component of a datetime value       | `date-time` | `integer`   | `minute("2024-03-16T14:15:30.500Z")`      | `15`           |
        | `second`      | Returns the second component of a datetime value       | `date-time` | `integer`   | `second("2024-03-16T14:15:30.500Z")`      | `30`           |
        | `millisecond` | Returns the millisecond component of a datetime value  | `date-time` | `integer`   | `millisecond("2024-03-16T14:15:30.500Z")` | `500`          |
        | `floor`       | Rounds a number down to the nearest integer            | `float`     | `integer`   | `floor(25.75)`                            | `25`           |
        |               |                                                        | `double`    |             |                                           |                |
        | `ceiling`     | Rounds a number up to the nearest integer              | `float`     | `integer`   | `ceiling(25.75)`                          | `26`           |
        |               |                                                        | `double`    |             |                                           |                |
        | `round`       | Rounds a number to the nearest integer                 | `float`     | `integer`   | `round(25.75)`                            | `26`           |
        |               |                                                        | `double`    |             |                                           |                |
        | `lower`       | Converts a string to lowercase                         | `string`    | `string`    | `lower("Nictiz")`                         | `"nictiz"`     |
        | `upper`       | Converts a string to uppercase                         | `string`    | `string`    | `upper("Nictiz")`                         | `"NICTIZ"`     |

        ## Combining sort expressions

        Sort expressions can be combined using a comma (`,`).

        Sort expressions are evaluated from left to right, for example:

        ```
        ?sort=asc(name),asc(createTime)
        ```

        Causes the results to be sorted first by `name` in ascending order (from A to Z), and then by `createTime` in ascending
        order (from oldest to newest).

        </details>
      required: false
      schema:
        type: string
        default: ''
      examples:
        empty:
          value: ''
          summary: Empty
        createTime:
          value: asc(createTime)
          summary: Create time (ascending)
        combinedSort:
          value: asc(name),desc(createTime)
          summary: Combined sort
        nestedField:
          value: asc(user.name)
          summary: Nested field
    filter:
      name: filter
      in: query
      description: |-
        The `filter` query string parameter restricts the data returned from your request.

        <details>
        <summary>Details</summary>

        ## Filter syntax

        A single filter expression uses the form:

        ```
        operator(field,value)
        ```

        In this syntax:

        - *operator* - The type of filter to use
        - *field* - The name of the field to filter on
            - Nested fields can be referenced using dot notation (`field.nested`) or bracket notation (`field["nested"]`)
        - *value* - The value that the field must be evaluated against

        ## Filter operators

        | Operator | Description                    | Field type  | Example                                             |
        |----------|--------------------------------|-------------|-----------------------------------------------------|
        | `eq`     | Equal to value                 | `boolean`   | `eq(field,true)`                                    |
        |          |                                | `number`    | `eq(field,1234)`                                    |
        |          |                                | `string`    | `eq(field,"text")`                                  |
        |          |                                | `date-time` | `eq(field,"2024-03-16T14:15:30.500Z")`              |
        |          |                                | `uuid`      | `eq(field,"533d3fe3-bccc-405a-9904-4f516e892856")`  |
        |          |                                | `null`      | `eq(field,null)`                                    |
        | `neq`    | Not equal to value             | `boolean`   | `neq(field,true)`                                   |
        |          |                                | `number`    | `neq(field,1234)`                                   |
        |          |                                | `string`    | `neq(field,"text")`                                 |
        |          |                                | `date-time` | `neq(field,"2024-03-16T14:15:30.500Z")`             |
        |          |                                | `uuid`      | `neq(field,"533d3fe3-bccc-405a-9904-4f516e892856")` |
        |          |                                | `null`      | `neq(field,null)`                                   |
        | `gt`     | Greater than value             | `number`    | `gt(field,1234)`                                    |
        |          |                                | `date-time` | `gt(field,"2024-03-16T14:15:30.500Z")`              |
        | `gte`    | Greater than or equal to value | `number`    | `gte(field,1234)`                                   |
        |          |                                | `date-time` | `gte(field,"2024-03-16T14:15:30.500Z")`             |
        | `lt`     | Less than value                | `number`    | `lt(field,1234)`                                    |
        |          |                                | `date-time` | `lt(field,"2024-03-16T14:15:30.500Z")`              |
        | `lte`    | Less than or equal to value    | `number`    | `lte(field,1234)`                                   |
        |          |                                | `date-time` | `lte(field,"2024-03-16T14:15:30.500Z")`             |
        | `has`    | Contains substring             | `string`    | `has(field,"text")`                                 |
        | `stw`    | Starts with string             | `string`    | `stw(field,"text")`                                 |
        | `enw`    | Ends with string               | `string`    | `enw(field,"text")`                                 |
        | `reg`    | Matches regular expression     | `string`    | `reg(field,"^[a-zA-Z0-9 ]+$")`                      |

        ### List operators

        The `any` and `all` operators can be used to filter on list fields. These operators will filter the data returned to 
        only include results where **any** or **all** items in given list return `true` for given filter expression.

        A single list operator uses the form:

        ```
        listOperator(listField,operator($it,value))
        ```

        In this syntax:

        - *listOperator* - The list operator to use
            - The `any` operator returns `true` if the filter expression is `true` for **at least one** item in the list
            - The `all` operator returns `true` if the filter expression is `true` for **every** item in the list
        - *listField* - The name of the list field to filter on
        - *operator* - The type of filter to use on the list items
        - *$it* - Keyword that refers to each individual item of the list field
            - If the item is an `object`, you can reference nested fields like so: `$it.nestedField`
        - *value* - The value that the list item must be evaluated against

        The `operator` in a list operator can be seen as a lambda function, where it represents the body of a loop in a 
        programming language with `$it` representing the current item of the list during iteration.

        #### Examples

        Any perspectiveType that is equal to "API_SPECIFICATION":

        ```
        ?filter=any(perspectiveTypes,eq($it,"API_SPECIFICATION"))
        ```

        All versions have any url with a type that is equal to "FUNCTIONAL_DESIGN":

        ```
        ?filter=all(versions,any($it.urls,eq($it.type,"FUNCTIONAL_DESIGN")))
        ```

        ### `not` operator

        The `not` operator evaluates to `true` if its sub-expression evaluates to `false`, and vice-versa.

        It can be applied to any filter operator, like so:

        ```
        not(operator(field,value))
        ```

        ## Filter values

        There are a couple of important rules for filter values:

        - **URL-reserved characters** - Characters such as `&` must be url-encoded in the usual way.
        - **Value syntax** - Value syntax is similar to that of JSON:
            - `string` - Must be written with double quotes (for example: `"value"`)
                - `date-time` - Must be written as string
                - `enum` - Must be written as string
                - `uuid` - Must be written as string
            - `number` - Must be written as JSON `number`
            - `boolean` - Must be written as JSON `boolean`: either `true` or `false`
            - `null` - Must be written as JSON `null` literal
        - **Regular expressions** - You can also use regular expressions in filter values using the `reg` operator. The syntax
          uses POSIX regular expressions (similar to Perl) and have these additional rules:
            - **Case sensitivity** - Regular expression matching is case-sensitive.
        - **Date-time values** - For date-time values, use [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format (for
          example: `"2024-03-16T14:15:30.500Z"`).

        ## Functions

        Filter functionality can be expanded using functions. These functions help to filter specific data types. For example,
        they allow to filter on the `year` component of a `date-time` type field.

        Functions can be applied to the `field` component of a filter expression, like so:

        ```
        operator(function(field),value) 
        ```

        ### Filter functions

        | Function      | Description                                            | Input type  | Output type | Example input                             | Example output |
        |---------------|--------------------------------------------------------|-------------|-------------|-------------------------------------------|----------------|
        | `year`        | Returns the year component of a date value             | `date-time` | `integer`   | `year("2024-03-16T14:15:30.500Z")`        | `2024`         |
        | `month`       | Returns the month component of a date value            | `date-time` | `integer`   | `month("2024-03-16T14:15:30.500Z")`       | `3`            |
        | `day`         | Returns the day of the month component of a date value | `date-time` | `integer`   | `day("2024-03-16T14:15:30.500Z")`         | `16`           |
        | `hour`        | Returns the hour component of a datetime value         | `date-time` | `integer`   | `hour("2024-03-16T14:15:30.500Z")`        | `14`           |
        | `minute`      | Returns the minute component of a datetime value       | `date-time` | `integer`   | `minute("2024-03-16T14:15:30.500Z")`      | `15`           |
        | `second`      | Returns the second component of a datetime value       | `date-time` | `integer`   | `second("2024-03-16T14:15:30.500Z")`      | `30`           |
        | `millisecond` | Returns the millisecond component of a datetime value  | `date-time` | `integer`   | `millisecond("2024-03-16T14:15:30.500Z")` | `500`          |
        | `floor`       | Rounds a number down to the nearest integer            | `float`     | `integer`   | `floor(25.75)`                            | `25`           |
        |               |                                                        | `double`    |             |                                           |                |
        | `ceiling`     | Rounds a number up to the nearest integer              | `float`     | `integer`   | `ceiling(25.75)`                          | `26`           |
        |               |                                                        | `double`    |             |                                           |                |
        | `round`       | Rounds a number to the nearest integer                 | `float`     | `integer`   | `round(25.75)`                            | `26`           |
        |               |                                                        | `double`    |             |                                           |                |
        | `lower`       | Converts a string to lowercase                         | `string`    | `string`    | `lower("Nictiz")`                         | `"nictiz"`     |
        | `upper`       | Converts a string to uppercase                         | `string`    | `string`    | `upper("Nictiz")`                         | `"NICTIZ"`     |

        ### Examples

        Date is in the month of March:

        ```
        ?filter=eq(month(dateField),3)
        ```

        ## Combining filter expressions

        Filter expressions can be combined using the `or` and `and` operators.

        ### Examples

        Name is either ("Nictiz" `OR` "MedMij"):

        ```
        ?filter=or(eq(name,"Nictiz"),eq(name,"MedMij"))
        ```

        Name does `NOT` end with "Mij":

        ```
        ?filter=not(enw(name,"Mij"))
        ```

        </details>
      required: false
      schema:
        type: string
        default: ''
      examples:
        empty:
          value: ''
          summary: Empty
        nameStartsWith:
          value: stw(name,"Nictiz")
          summary: Starts with
        nameEqualsOr:
          value: or(eq(name,"Nictiz"),eq(name,"MedMij"))
          summary: Name equals (OR)
        createdInOctober2023:
          value: and(eq(year(createTime),2023),eq(month(createTime),10))
          summary: Created in October 2023
    count:
      name: count
      in: query
      description: |-
        The `count` query string parameter defines whether to provide a count of the total number of results.

        <details>
        <summary>Details</summary>

        To request a count, use:

        ```
        ?count=true
        ```

        The count will be returned in the `Total-Count` header, for example:

        ```
        200 OK
        Total-Count: 78
        ```

        *Note that when the `filter` query string parameter is set, the total number of results returned in the `Total-Count`
        header reflects the filtered result set.*

        </details>
      required: false
      schema:
        type: boolean
        default: false
    organizationId:
      name: organizationId
      in: path
      required: true
      description: The ID of the organization
      schema:
        type: string
        format: uuid
        examples:
          - b9b95cd7-8d6e-4c91-8861-854828cf1730
    versionName:
      name: versionName
      in: path
      required: true
      description: The name of the version
      schema:
        type: string
        examples:
          - 1.2.0
    apiSpecificationId:
      name: apiSpecificationId
      in: path
      required: true
      description: The ID of the API specification
      schema:
        type: string
        format: uuid
        examples:
          - fe30bf05-de07-4556-9b17-1f82d62fe45f
    versionId:
      name: versionId
      in: path
      required: true
      description: The ID of the version
      schema:
        type: string
        format: uuid
        examples:
          - 14b441d7-2f17-4461-8a0b-02d331594b66
    urlId:
      name: urlId
      in: path
      required: true
      description: The ID of the URL
      schema:
        type: string
        format: uuid
        examples:
          - 2cc6437b-c5a6-4afa-9d0c-1544a8d19342
    declarationOfConformityId:
      name: declarationOfConformityId
      in: path
      required: true
      description: The ID of the declaration of conformity
      schema:
        type: string
        format: uuid
        examples:
          - dc944125-5269-4dd9-afda-413a37ed9733
  responses:
    BadRequestError:
      description: Bad request error. This is mostly for syntax errors (e.g. incorrect JSON format), for semantic errors see status `422`.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiError'
          example:
            status: 400
            type: INVALID_ARGUMENT
            message: Failed to parse body
    UnauthenticatedError:
      description: Unauthenticated error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiError'
          example:
            status: 401
            type: UNAUTHENTICATED
            message: The request did not include valid authentication credentials
    PermissionDeniedError:
      description: Permission denied error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiError'
          example:
            status: 403
            type: PERMISSION_DENIED
            message: The user is not authorized to make this request
    InvalidArgumentError:
      description: |
        Invalid argument error. This is different from status `400` in that the syntax is correct (e.g. correct JSON format), 
        but one or more values are invalid (e.g. an integer value is greater than the specified maximum).
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiError'
          example:
            status: 422
            type: INVALID_ARGUMENT
            message: A request parameter includes an invalid value
            details:
              - location: name
                message: '''name'' is required'
    ResourceExhaustedError:
      description: Resource exhausted error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiError'
          example:
            status: 429
            type: RESOURCE_EXHAUSTED
            message: The requests quota has been exhausted
    UnavailableError:
      description: Unavailable error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiError'
          example:
            status: 503
            type: UNAVAILABLE
            message: The server was unable to process the request
    InternalError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiError'
          example:
            status: 500
            type: INTERNAL
            message: Internal server error
    NotFoundError:
      description: Not found error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiError'
          example:
            status: 404
            type: NOT_FOUND
            message: The resource you requested does not exist
    EmptyResponse:
      description: Empty response
    AlreadyExistsError:
      description: Already exists error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiError'
          example:
            status: 409
            type: ALREADY_EXISTS
            message: The request tried to create a resource that already exists
  headers:
    Total-Count:
      description: Total amount of available results. Only included if query string parameter `count=true` was set.
      required: false
      schema:
        type: integer
        examples:
          - 78
x-tagGroups:
  - name: Organizations
    tags:
      - organizations
  - name: API requirements
    tags:
      - api-requirements-versions
      - api-requirements-version.api-requirements
  - name: API specifications
    tags:
      - api-specifications
      - api-specification.versions
      - api-specification.version.urls
      - api-specification.version.declarations-of-conformity
